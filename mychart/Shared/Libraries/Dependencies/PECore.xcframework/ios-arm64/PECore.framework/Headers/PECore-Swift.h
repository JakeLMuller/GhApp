// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef PECORE_SWIFT_H
#define PECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PECore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class PEOrganizationContext;
@class UIAlertController;
@protocol PEThemeProtocol;
@class UIAlertAction;

/// Utility class for alerts (UIAlertController)
SWIFT_CLASS("_TtC6PECore10AlertUtils")
@interface AlertUtils : NSObject
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param context the current organization context
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithContext:(PEOrganizationContext * _Nullable)context title:(NSString * _Nullable)title message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param theme the current theme
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithTheme:(id <PEThemeProtocol> _Nullable)theme title:(NSString * _Nullable)title message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param theme the current theme
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
/// \param alwaysInLTR indicates the message is always In English so we want it to be displayed in LTR always
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithTheme:(id <PEThemeProtocol> _Nullable)theme title:(NSString * _Nullable)title message:(NSString * _Nonnull)message alwaysInLTR:(BOOL)alwaysInLTR SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController for special character validation errors.
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeSpecialCharacterAlertController SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController for generic web service errors.
/// \param handler completion handler to
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)defaultWebServiceErrorAlertControllerWithHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC6PECore17AnimatedImageView")
@interface AnimatedImageView : UIView
/// This color will overwrite all fills and strokes in vector images
@property (nonatomic, copy) NSString * _Nullable tintColorHex;
/// Initialize with an image, bundle and optional tint color
- (nonnull instancetype)initWithImageNamed:(NSString * _Nonnull)resource in:(NSBundle * _Nonnull)bundle tintColor:(NSString * _Nullable)tint;
/// Initialize view; will need an image set later
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize from IB
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the currently visible image.
/// \param resource name of animated resource, like image.svg, or static image name in xcasset
///
/// \param bundle the bundle in which to find the resource
///
- (void)setImageWithName:(NSString * _Nonnull)resource in:(NSBundle * _Nonnull)bundle;
/// Removes any visible image.
- (void)clearImage;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// APIs for various audit mechanisms
SWIFT_CLASS("_TtC6PECore9AuditUtil")
@interface AuditUtil : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore12BottomButton")
@interface BottomButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


@interface NSBundle (SWIFT_EXTENSION(PECore))
/// Bundle for the PECore framework
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull PECore;)
+ (NSBundle * _Nonnull)PECore SWIFT_WARN_UNUSED_RESULT;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore8CardView")
@interface CardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
@end

typedef SWIFT_ENUM(NSInteger, CardType, open) {
  CardTypeNormal = 0,
  CardTypeTopHalf = 1,
};

@class UIImageView;
@class UILabel;
@protocol CommunityDataRefreshViewDelegate;
enum CommunityDataRefreshStatus : NSInteger;

IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore24CommunityDataRefreshView")
@interface CommunityDataRefreshView : UIView
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified iconView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified textLabel;
@property (nonatomic) BOOL isSetup;
@property (nonatomic, getter=isHidden) BOOL hidden;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
/// Initialize the view with title, delegate, and colors
/// \param delegate delegate to handle click event
///
- (void)setupBannerWithDelegate:(id <CommunityDataRefreshViewDelegate> _Nonnull)delegate;
/// update the text of the banner
/// \param title title of the activity
///
/// \param status status of updates for organizations
///
- (void)updateBannerTextWithTitle:(NSString * _Nonnull)title status:(enum CommunityDataRefreshStatus)status;
/// update the text of the banner
/// \param title title of the activity
///
/// \param text text is displayed
///
/// \param status status of updates for organizations
///
- (void)updateBannerTextWithTitle:(NSString * _Nonnull)title text:(NSString * _Nonnull)text status:(enum CommunityDataRefreshStatus)status;
@end

typedef SWIFT_ENUM(NSInteger, CommunityDataRefreshStatus, open) {
  CommunityDataRefreshStatusNORMAL = 0,
  CommunityDataRefreshStatusLOADING = 1,
  CommunityDataRefreshStatusERROR = 2,
};


SWIFT_PROTOCOL("_TtP6PECore32CommunityDataRefreshViewDelegate_")
@protocol CommunityDataRefreshViewDelegate
- (void)didTapRefreshBanner;
@end

typedef SWIFT_ENUM(NSInteger, CommunityUpdateContext, open) {
  CommunityUpdateContextALLERGIES = 0,
  CommunityUpdateContextHEALTHISSUES = 1,
  CommunityUpdateContextAPPOINTMENTS = 2,
  CommunityUpdateContextTESTRESULT = 3,
  CommunityUpdateContextMEDICATION = 4,
  CommunityUpdateContextMANAGEMYACCOUNT = 5,
};


SWIFT_CLASS("_TtC6PECore22CookieAllowListManager")
@interface CookieAllowListManager : NSObject
+ (CookieAllowListManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)addCookieToAllowListWithCookieName:(NSString * _Nonnull)cookieName;
- (void)removeCookieFromAllowListWithCookieName:(NSString * _Nonnull)cookieName;
- (void)clearAllCookiesFromAllowList;
- (NSSet<NSString *> * _Nonnull)getCookiesInAllowList SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DateFormatStyle : NSInteger;

SWIFT_CLASS("_TtC6PECore8DateUtil")
@interface DateUtil : NSObject
/// Override for getDateString() without the optional parameter, for Objective-C
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nullable)date dateStyle:(enum DateFormatStyle)style SWIFT_WARN_UNUSED_RESULT;
/// Create a displayable string from a given date and a defined format
/// <ul>
///   <li>
///     Bridges to the implementation of stringFromDate:withDateFormat: in WPUtil_Dates
///   </li>
/// </ul>
/// @param date: the date to use as the source
/// @param dateStyle: the DateFormatStyle to use for date formatting
/// @param timeZone: optional time zone override for the date formatter
/// @return the string representation of the date
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nullable)date dateStyle:(enum DateFormatStyle)style timeZone:(NSTimeZone * _Nullable)timeZone SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nonnull)date dateStyle:(enum DateFormatStyle)style timeZone:(NSTimeZone * _Nullable)timeZone locale:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Create a date given the defined string format
/// @param dateString: the date as a string
/// @param dateStyle: the DateFormatStyle to use for date formatting
/// @return the string representation of the date, or nil if not parse-able
+ (NSDate * _Nullable)getDateFromString:(NSString * _Nullable)dateString dateStyle:(enum DateFormatStyle)style SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Standard date formats for PE apps
typedef SWIFT_ENUM(NSInteger, DateFormatStyle, open) {
/// The hour of the day, with AM/PM if necessary
  DateFormatStyleShortHour = 0,
/// Standard time format, with AM/PM as necessary.
/// Corresponds to DateFormatter.Style.short time formatting
  DateFormatStyleShortHoursMinutes = 1,
/// Shorthand date format (like 10/25/2019)
  DateFormatStyleShortMonthDateYear = 2,
/// Shorthand date and time format (like 10/25/2019 2:45 AM)
/// Corresponds to DateFormatter.Style.short date and time formatting
  DateFormatStyleShortMonthDateYearHoursMinutes = 3,
/// Abbreviated month and date (like Oct 25)
  DateFormatStyleMediumMonthDate = 4,
/// Abbreviated month, with date and year (like Oct 25 2019)
/// Corresponds to DateFormatter.Style.medium date
  DateFormatStyleMediumMonthDateYear = 5,
/// Month and date (like October 25)
  DateFormatStyleLongMonthDate = 6,
/// Day of the week, month, and date (like Friday, October 25)
  DateFormatStyleLongDayMonthDate = 7,
/// Month, date, and year (like October 25, 2019)
/// Corresponds to DateFormatter.Style.long date
  DateFormatStyleLongMonthDateYear = 8,
/// Just the day of the week
  DateFormatStyleDay = 9,
/// Server date format. Not for human-readable text.
  DateFormatStyleServerDate = 10,
};


SWIFT_CLASS("_TtC6PECore13DirectUrlArgs")
@interface DirectUrlArgs : NSObject
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts;
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts myChartHost:(NSString * _Nullable)myChartHost OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// View controller for embedded “how to” video
SWIFT_CLASS("_TtC6PECore27EmbeddedVideoViewController")
@interface EmbeddedVideoViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Class designed to help serialize strings to base64 encrypted data
SWIFT_CLASS("_TtC6PECore14EncryptionUtil")
@interface EncryptionUtil : NSObject
/// Primary method for encrypting interconnect session tokens
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSData * _Nonnull derivedKeyMethod1;)
+ (NSData * _Nonnull)derivedKeyMethod1 SWIFT_WARN_UNUSED_RESULT;
+ (void)setDerivedKeyMethod1:(NSData * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ExternalOrganizationLinkType, open) {
  ExternalOrganizationLinkTypeUndefined = 0,
  ExternalOrganizationLinkTypeMyChart = 1,
  ExternalOrganizationLinkTypeFhir = 2,
  ExternalOrganizationLinkTypeDxr = 3,
};


SWIFT_CLASS("_TtC6PECore16GifAnimationView")
@interface GifAnimationView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Standard banner class for H2G orgs that have failed to load for an activity
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore18H2GErrorBannerView")
@interface H2GErrorBannerView : UIView
/// Set this label to the banner text you want to appear next to the icon
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified textLabel;
/// overriden to auto-shrink for vertical constaints and suppose accessibility
@property (nonatomic, getter=isHidden) BOOL hidden;
/// create in code
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// create from nib
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// render in IB
- (void)prepareForInterfaceBuilder;
@end

@class UIGestureRecognizer;

@interface H2GErrorBannerView (SWIFT_EXTENSION(PECore)) <UIGestureRecognizerDelegate>
/// Do not fire container view’s tap recognizer if delete is the tapped target.
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PEH2GOrgPopupComponentAPIProtocol;

/// Listener for taps to the H2G error banner
SWIFT_PROTOCOL("_TtP6PECore26H2GErrorBannerViewDelegate_")
@protocol H2GErrorBannerViewDelegate
/// Alerts the controller that the user has tapped the H2G banner
/// \param popupComponent the standard popupComponent that can show the details popup
///
- (void)didTapH2GBannerWithPopupComponent:(id <PEH2GOrgPopupComponentAPIProtocol> _Nonnull)popupComponent;
@optional
/// Callback to inform client that the user tapped the close button
- (void)didCloseH2GBanner;
@end

/// The type of overlay to initialize the homepage with
typedef SWIFT_ENUM(NSInteger, HomepageOverlayType, open) {
  HomepageOverlayTypeNone = 0,
  HomepageOverlayTypeUseDefaultLogic = 1,
  HomepageOverlayTypeProxySplashScreen = 2,
  HomepageOverlayTypeOnboardingScreen = 3,
};


SWIFT_CLASS("_TtC6PECore23HttpHeaderFieldsManager")
@interface HttpHeaderFieldsManager : NSObject
+ (HttpHeaderFieldsManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setHttpHeaderField:(NSString * _Nonnull)field withValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (void)removeHttpHeaderField:(NSString * _Nonnull)field;
- (void)removeAllHttpHeaderFields;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getAllHttpHeaderFields SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isHttpHeaderFieldAllowed:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Source from which an image can be retrieved
SWIFT_PROTOCOL("_TtP6PECore15ImageDataSource_")
@protocol ImageDataSource
/// The URL from which the image can be loaded
@property (nonatomic, readonly, copy) NSString * _Nonnull imageURL;
@end

@protocol ImageLoaderDelegate;
@class PEPatientContext;

/// Utility to load images with special handling for cacheable and provider images
SWIFT_CLASS("_TtC6PECore11ImageLoader")
@interface ImageLoader : NSObject
/// Attempts to load an image from the specified image source
/// \param source The image source for which to load an image
///
/// \param delegate Delegate to be called when the load succeeds or fails
///
/// \param context Patient context is only required for provider blob photos
///
+ (void)loadImageWithSource:(id <ImageDataSource> _Nonnull)source delegate:(id <ImageLoaderDelegate> _Nonnull)delegate andPatientContext:(PEPatientContext * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// Delegate for handling image loading successes and failures
SWIFT_PROTOCOL("_TtP6PECore19ImageLoaderDelegate_")
@protocol ImageLoaderDelegate
/// Handler for when an image successfully loads
/// \param image The image that loaded
///
/// \param source The source for which this image loaded
///
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
/// Handler for when an image fails to load
/// \param source The source for which image loading failed
///
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end

@class NSMutableArray;
enum InlineEducationType : NSInteger;
@protocol PEPatientProtocol;

SWIFT_CLASS("_TtC6PECore30InlineEducationContextProvider")
@interface InlineEducationContextProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (InlineEducationContextProvider * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Populate util instance with an array of available education content contexts
/// \param contextIds NSMutableArray
///
- (void)setAvailableContextsFor:(NSMutableArray * _Nonnull)contextIds;
/// Check if a given Inline Education context is supported by the server (has FDI record configured)
/// \param educationType InlineEducationType
///
- (BOOL)isContextAvailableFor:(enum InlineEducationType)educationType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasSecurityPointForContextWithEducationType:(enum InlineEducationType)educationType patient:(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// Remove all contexts between session
+ (void)resetContextState;
@end


SWIFT_PROTOCOL("_TtP6PECore29InlineEducationSourceProtocol_")
@protocol InlineEducationSourceProtocol
/// Indicates whether we’ve set up I WDF 96033 for the corresponding InlineEducationType (WDF 96031)
- (BOOL)hasInlineEducationSource SWIFT_WARN_UNUSED_RESULT;
/// Returns InlineEducationType (I WDF 96031)
- (enum InlineEducationType)getInlineEducationContext SWIFT_WARN_UNUSED_RESULT;
/// Generally returns the model record ID, used to resolve mnemonics in the FDI
- (NSString * _Nonnull)getInlineEducationContextID SWIFT_WARN_UNUSED_RESULT;
/// Return a search keyword - used for H2G records or fallback only
- (NSString * _Nonnull)getInlineEducationSearchTerm SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, InlineEducationType, open) {
  InlineEducationTypeDiagnoses = 1,
  InlineEducationTypeMedications = 2,
  InlineEducationTypeProcedures = 3,
  InlineEducationTypeLabResults = 4,
  InlineEducationTypeAllergies = 5,
  InlineEducationTypeImmunizations = 6,
  InlineEducationTypeKeyword_Diagnoses = 7,
  InlineEducationTypeKeyword_LabResults = 8,
};

@protocol PEComponentHostProtocol;
@class PEEncounterContext;

/// Inline Education Infobutton
SWIFT_CLASS("_TtC6PECore19InlineEducationView")
@interface InlineEducationView : UIImageView
- (BOOL)setInlineEducationSourceWithSource:(id <InlineEducationSourceProtocol> _Null_unspecified)source componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost patientContext:(PEPatientContext * _Nullable)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext hostVC:(UIViewController * _Nullable)hostVC onShowLoadingIndicator:(void (^ _Nonnull)(void))onShowLoadingIndicator onHideLoadingIndicator:(void (^ _Nonnull)(void))onHideLoadingIndicator SWIFT_WARN_UNUSED_RESULT;
- (void)onInlineEducationViewClick;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getAccessibilityString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore20LoadingIndicatorView")
@interface LoadingIndicatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
@end

/// Available Localized Locale
typedef SWIFT_ENUM(NSInteger, LocalizedLocale, open) {
  LocalizedLocaleEnglish = 0,
  LocalizedLocaleGibberish = 1,
  LocalizedLocaleArabic = 2,
  LocalizedLocaleDanish = 3,
  LocalizedLocaleGerman = 4,
  LocalizedLocaleEnglishUK = 5,
  LocalizedLocaleSpanish = 6,
  LocalizedLocaleFinnish = 7,
  LocalizedLocaleFrench = 8,
  LocalizedLocaleDutch = 9,
  LocalizedLocaleSwedish = 10,
  LocalizedLocaleEnglishSG = 11,
  LocalizedLocaleEnglishAU = 12,
  LocalizedLocaleFrenchBE = 13,
  LocalizedLocaleGermanCH = 14,
};


SWIFT_CLASS("_TtC6PECore24MyChartJavascriptManager")
@interface MyChartJavascriptManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore25MyChartJavascriptProtocol_")
@protocol MyChartJavascriptProtocol
- (void)onJavascriptRequestsClose;
- (void)resetIdleTimer;
/// Called by javascript to hide or show the close button on a component popup web view
- (void)disableCloseButton;
- (void)reenableCloseButton;
/// Called by javascript to set the title for the webview. Used to change the title of the webview for multi-step MO workflows
/// \param title The title for the webview
///
- (void)setWebViewTitleWithNewTitle:(NSString * _Nonnull)newTitle;
@end

@protocol WKScriptMessageHandler;

/// Use this for WKUserContentControllers to avoid memory leaks caused by script message handlers
/// See this stack overflow for more information:
/// https://stackoverflow.com/questions/26383031/wkwebview-causes-my-view-controller-to-leak
SWIFT_CLASS("_TtC6PECore28MyChartUserContentController")
@interface MyChartUserContentController : WKUserContentController
- (void)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler name:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PEUserContext;
@class MyChartWebParameter;
@protocol PEOrganizationInfoProtocol;

/// Contains a collection of parameters needed to generate a valid MO url link by the server
SWIFT_CLASS("_TtC6PECore14MyChartWebArgs")
@interface MyChartWebArgs : NSObject
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters;
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters organization:(id <PEOrganizationInfoProtocol> _Nullable)organization OBJC_DESIGNATED_INITIALIZER;
/// \param baseArgs Args to copy all of the properties from, except parameters
///
/// \param parameters Parameters to use with the new args
/// Create a new object copying all of the parameters from baseArgs, except using the new parameters
///
- (nonnull instancetype)initWithBaseArgs:(MyChartWebArgs * _Nonnull)baseArgs parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A web query parameter set  stored as a key value pair
SWIFT_CLASS("_TtC6PECore19MyChartWebParameter")
@interface MyChartWebParameter : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)name :(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MyChartWebViewControllerManager;
enum ButtonStyle : NSInteger;

/// WebView Controller used to log into MyChart or open an external web view. Corresponds to MyChartWebViewFragment in java.
SWIFT_CLASS("_TtC6PECore24MyChartWebViewController")
@interface MyChartWebViewController : UIViewController
/// Get a new viewController from the storyboard and set up the web view. Defaults to no close button and showing the back button.
/// \param webViewArgs Args that you want the web view to use
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view using a Url. (Use for opening allowed-host, non-MyChart links in this fragment)
/// \param directUrlArgs Args for initializing directly via a url instead a mode
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view using a Url. (Use for opening allowed-host, non-MyChart links in this fragment)
/// \param directUrlArgs Args for initializing directly via a url instead a mode
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
/// Sets if we should be listening for a refresh on the web page for any reason
- (void)setRefreshNotification;
/// Reload the web view.
- (void)reload;
/// Pass incoming notification to manager for handling
/// \param notification notification
///
- (void)didReceiveNotifications:(NSNotification * _Nonnull)notification;
- (void)cancelAndCloseWithoutBackNavigation;
/// Back button handler
- (void)didTapBackButton;
/// Close button handler
- (void)didTapCloseButton;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum for controlling the functionality of the close button
typedef SWIFT_ENUM(NSInteger, ButtonStyle, open) {
/// No close button shown to the user
  ButtonStyleNone = 0,
/// When attempting to close via close button, the web view will NOT try and save before closing
  ButtonStyleClose = 1,
/// When attempting to close via close button, the web view will try and save before closing
  ButtonStyleFinishLater = 2,
};


SWIFT_PROTOCOL("_TtP6PECore19WebActivityListener_")
@protocol WebActivityListener
- (void)onActivity;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WebActivityListener>
- (void)onActivity;
@end

@class WKScriptMessage;

@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end

@class UIBarButtonItem;

/// A ViewController specifically designed to be hosted in a PEComponentHost.
SWIFT_PROTOCOL("_TtP6PECore33PEHostableComponentViewController_")
@protocol PEHostableComponentViewController
/// Tells the hostable ViewController what its host is, so it can keep a weak reference.
/// REMEMBER TO ONLY KEEP A WEAK REFERENCE, so we don’t get retain cycles
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
@optional
///
/// returns:
/// true if the host should hide patient information in the header
- (BOOL)shouldHideComponentHostPatientInformation SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a nullable UIBarButtonItem for the left UIBarButtonItem of the parent view controller
- (UIBarButtonItem * _Nullable)getLeftBarButtonItem SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a nullabe UIBarButtonItem for the right UIBarButtonItem of the parent view controller
- (UIBarButtonItem * _Nullable)getRightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <PEHostableComponentViewController>
/// Set the component host to the new value
/// \param host New Component host to be used
///
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)host;
/// Create the back button, if it existss
- (UIBarButtonItem * _Nullable)getLeftBarButtonItem SWIFT_WARN_UNUSED_RESULT;
/// Create the close button, if it exists
- (UIBarButtonItem * _Nullable)getRightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <MyChartJavascriptProtocol>
/// When the javascript requests to close, logout and close the web view.
- (void)onJavascriptRequestsClose;
- (void)resetIdleTimer;
- (void)setWebViewTitleWithNewTitle:(NSString * _Nonnull)newTitle;
- (void)disableCloseButton;
- (void)reenableCloseButton;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore))
/// Handle back navigation from the pressing the back button
- (void)handleBackNavigation;
- (BOOL)canClose SWIFT_WARN_UNUSED_RESULT;
+ (void)promptUserWithLaunchOutsideAlertWithRootVC:(UIViewController * _Nonnull)rootVC onLaunch:(void (^ _Nonnull)(void))onLaunch onClose:(void (^ _Nonnull)(void))onClose;
@end


/// This manager handles events from the MyChartWebViewController. This manager is inteneded to be subclassed for a MO activity and have the necessary functions overriden to handle events important to the specific activity.
/// This manager super class is meant to serve general functionality for all or most of the MO activities. If functionality is needed that will be used by most other activities, it should be added here or in the MyChartWebViewController. However, functionality that is needed for a specific activity, it should be handled in a subclass of this manager that is specific to that activity.
/// Corresponds to MyChartWebViewFragmentManager in Java.
SWIFT_CLASS("_TtC6PECore31MyChartWebViewControllerManager")
@interface MyChartWebViewControllerManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

/// This class handles the navigation for the WKWebView in MyChartWebViewController.
SWIFT_CLASS("_TtC6PECore32MyChartWebViewNavigationDelegate")
@interface MyChartWebViewNavigationDelegate : NSObject <WKNavigationDelegate>
/// Handles navigation in the web view controller by checking if we want to override the navigation action.
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
/// When the page load starts, we want to start a timer for timeout and tell the delegate.
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
/// When the page load ends, we want to stop the timer, no timeout, and tell the delegate.
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
/// When the page becomes visible, tell the delegate.
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)didCommit;
/// When we recieve an error, tell the delegate
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebViewConfiguration;
@class WKWindowFeatures;

/// This class handles the events that are raised by the WKWebView related to the UI.
SWIFT_CLASS("_TtC6PECore24MyChartWebViewUIDelegate")
@interface MyChartWebViewUIDelegate : NSObject <WKUIDelegate>
/// When trying to load a pdf, the web view will trigger this event. Instead of the action that the web view is trying to take, we just want to load the pdf, using the request that already exists in the navigation action like any other website request.`
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSData (SWIFT_EXTENSION(PECore))
- (NSData * _Nonnull)toSHA1 SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;

@interface NSNotification (SWIFT_EXTENSION(PECore))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull refreshWebView;)
+ (NSString * _Nonnull)refreshWebView SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull reloadComponentPaneHostedViewController;)
+ (NSString * _Nonnull)reloadComponentPaneHostedViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
+ (BOOL)isNullOrWhiteSpace:(NSString * _Nullable)str SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
- (NSString * _Nonnull)fromAES128StringWithKey:(NSData * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toAES128StringWithKey:(NSData * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes navigation between view controllers in a way that emphasizes the workflow step, not the visual appearance of the transition.
typedef SWIFT_ENUM(NSInteger, NavigationType, open) {
/// The user is entering an entirely new workflow. This should be a large visual transition.
  NavigationTypeNewWorkflow = 0,
/// The user has selected something that will show them more detailed information about a part of the whole that they were looking at.
  NavigationTypeDrilldown = 1,
/// The user has progressed through a workflow to the point where they can no longer go back.
  NavigationTypeReplacement = 2,
/// Used to show contextual information about part of the screen, but it shouldn’t feel like the user is going anywhere new.
  NavigationTypeInformationPopover = 3,
/// Used to show important information as an alert on top of the current screen.
  NavigationTypeAlert = 4,
};

enum PEAlertType : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore15PEAlertProtocol_")
@protocol PEAlertProtocol
- (NSInteger)getCount SWIFT_WARN_UNUSED_RESULT;
- (enum PEAlertType)getType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEAlertType, open) {
  PEAlertTypeUnknown = 0,
  PEAlertTypeHealthReminders = 100,
  PEAlertTypeTasks = 2000,
  PEAlertTypeTaskChanges = 2001,
  PEAlertTypeNewInpatientLab = 62,
  PEAlertTypeNewOutpatientLab = 61,
};

typedef SWIFT_ENUM(NSInteger, PEAppleWatchState, open) {
  PEAppleWatchStateNotLinkable = 0,
  PEAppleWatchStateUnlinked = 1,
  PEAppleWatchStateLinkedToThisOrg = 2,
  PEAppleWatchStateLinkedToAnotherOrg = 3,
};


/// Base IComponentAPI interface.  All component API interfaces must extend this.
SWIFT_PROTOCOL("_TtP6PECore22PEComponentAPIProtocol_")
@protocol PEComponentAPIProtocol
@end

@protocol PEPersonProtocol;
@protocol PELocaleInfo;

/// Application Level apis - Methods in this interface should be application/build specific and not used when common utils will do.
SWIFT_PROTOCOL("_TtP6PECore33PEApplicationComponentAPIProtocol_")
@protocol PEApplicationComponentAPIProtocol <PEComponentAPIProtocol>
/// Log out of the application
- (void)logout;
/// Tell the main application that the following person is selected
/// \param person the person to switch to
///
- (void)switchCurrentPerson:(id <PEPersonProtocol> _Nonnull)person;
@optional
/// Tell the main application to invalidate alerts for the current person
- (void)invalidateAlertsForPatient;
@required
/// Is the application an internal build
- (BOOL)isInternalBuild SWIFT_WARN_UNUSED_RESULT;
@optional
/// Toggles the language override API available to MyChart library customers
- (void)toggleLanguageOverride;
@required
/// Is the application branded?
- (BOOL)isBrandedApp SWIFT_WARN_UNUSED_RESULT;
@optional
/// Should we enable logout button?
- (BOOL)shouldEnableLogoutButton SWIFT_WARN_UNUSED_RESULT;
@required
///
/// returns:
/// an object with login-specific local information
- (id <PELocaleInfo> _Nonnull)getCurrentLocaleInfo SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the user is authenticated
- (BOOL)isFullyAuthenticated SWIFT_WARN_UNUSED_RESULT;
@optional
- (enum PEAppleWatchState)getAppleWatchState SWIFT_WARN_UNUSED_RESULT;
/// Tell the main application to reset IdleTimer so we don’t log the patient out
- (void)resetIdleTimer;
@required
/// Tell the main application to start IdleTimer
- (void)startIdleTimer;
/// Tell the main application to stop IdleTimer
- (void)stopIdleTimer;
/// Returns the context for the logged-in user, if applicable
- (PEUserContext * _Nullable)getCurrentUserContext SWIFT_WARN_UNUSED_RESULT;
/// Returns the context for the current patient, if applicable
- (PEPatientContext * _Nullable)getCurrentPatientContext SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore21PEAppointmentProvider_")
@protocol PEAppointmentProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly) BOOL canDirectSchedule;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull getPEOrganization;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEAppointmentsComponentAPIProtocol_")
@protocol PEAppointmentsComponentAPIProtocol <PEComponentAPIProtocol>
/// \param csn The contact serial number of the appointment to launch into
///
///
/// returns:
/// A view controller for the e-checkin workflow
- (UIViewController * _Nullable)getECheckInViewControllerForCSN:(NSString * _Nonnull)csn SWIFT_WARN_UNUSED_RESULT;
/// \param csn The contact serial number of the appointment to launch into
///
///
/// returns:
/// A view controller displaying appointment details
- (UIViewController * _Nullable)getFutureAppointmentViewControllerForCSN:(NSString * _Nonnull)csn SWIFT_WARN_UNUSED_RESULT;
/// \param provider The provider with whome to schedule an appointment
///
///
/// returns:
/// A view controller where a patient can schedule an appointment
- (UIViewController * _Nullable)getWebSchedulingViewControllerForProvider:(id <PEAppointmentProvider> _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
/// \param provider The provider with whome to schedule an appointment
///
/// \param wrapInNavigator If true, the view controller will be wrapped in a navigator
///
///
/// returns:
/// A view controller where a patient can schedule an appointment
- (UIViewController * _Nullable)getWebSchedulingViewControllerForProvider:(id <PEAppointmentProvider> _Nonnull)provider wrapInNavigator:(BOOL)wrapInNavigator SWIFT_WARN_UNUSED_RESULT;
/// \param reasonForVisit Reason for visit
///
/// \param hmTopicId Health Maintenance Topic ID
///
/// \param wrapInNavigator If true, the view controller will be wrapped in a navigator
///
///
/// returns:
/// A view controller where a patient can schedule an appointment
- (UIViewController * _Nullable)getWebSchedulingViewControllerWithReasonForVisit:(NSString * _Nonnull)reasonForVisit hmTopicId:(NSString * _Nonnull)hmTopicId wrapInNavigator:(BOOL)wrapInNavigator SWIFT_WARN_UNUSED_RESULT;
/// \param reasonForVisitID Reason for visit
///
///
/// returns:
/// A view controller where a patient can schedule a video appointment
- (UIViewController * _Nullable)getVideoVisitSchedulingViewControllerWithReasonForVisitID:(NSString * _Nonnull)reasonForVisitID SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// if the currrent patient has access to this component
- (BOOL)hasAccessToWebScheduling SWIFT_WARN_UNUSED_RESULT;
/// triggers a call to ping for hello patient
- (void)initiateHelloPatient;
@end

@protocol TwoFactorInformationProtocol;
@class PEError;

/// Authentication Component API
SWIFT_PROTOCOL("_TtP6PECore36PEAuthenticationComponentAPIProtocol_")
@protocol PEAuthenticationComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns a view controller for the two-factor authentication workflow during login.
/// \param userContext the current user context
///
/// \param destinationStringArray a comma-delimited list of two factor code destinations, as returned by the login web service
///
/// \param canTrustDevice a boolean indicating whether or not devices can be trusted; a login on a trusted device does not require two factor authentication every time
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
///
/// returns:
/// A view controller for the two-factor authentication workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorAuthenticationWithContext:(PEUserContext * _Nonnull)userContext destinationStringArray:(NSArray<NSString *> * _Nonnull)destinationStringArray canTrustDevice:(BOOL)canTrustDevice completionHandler:(void (^ _Nullable)(BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for the two-factor enrollment workflow during login.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
///
/// returns:
/// A view controller for the two-factor enrollment workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorEnrollmentWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether or not the back-end supports the two-factor opt-in/out workflow.
/// \param userContext the current user context
///
///
/// returns:
/// True if the server supports the two-factor opt-in/out workflow; False otherwise.
- (BOOL)supportsTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
/// Executes a web service to load user and system information regarding two-factor authentication.
/// \param userContext the current user context
///
/// \param completionHandler the handler to invoke on completion of the web service
///
/// \param errorHandler the handler to invoke if an error occurs
///
- (void)loadTwoFactorInformationWithContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nonnull)(id <TwoFactorInformationProtocol> _Nullable))completionHandler errorHandler:(void (^ _Nonnull)(PEError * _Nonnull))errorHandler;
/// Returns a view controller for the two-factor opt-in/out workflow.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
///
/// returns:
/// A view controller for the two-factor opt-in/out workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for two-factor onboarding.
/// \param userContext the current user context
///
///
/// returns:
/// A view controller for two-factor onboarding.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOnboardingWithContext:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEBrandedColor, open) {
  PEBrandedColorUnknown = 0,
/// Person colors, which are used to distinguish between people that the user can access
  PEBrandedColorPersonColor1 = 1,
  PEBrandedColorPersonColor2 = 2,
  PEBrandedColorPersonColor3 = 3,
  PEBrandedColorPersonColor4 = 4,
  PEBrandedColorPersonColor5 = 5,
  PEBrandedColorPersonColor6 = 6,
  PEBrandedColorPersonColor7 = 7,
  PEBrandedColorPersonTextColor1 = 8,
  PEBrandedColorPersonTextColor2 = 9,
  PEBrandedColorPersonTextColor3 = 10,
  PEBrandedColorPersonTextColor4 = 11,
  PEBrandedColorPersonTextColor5 = 12,
  PEBrandedColorPersonTextColor6 = 13,
  PEBrandedColorPersonTextColor7 = 14,
/// The color used as the background for mobile activities.
  PEBrandedColorBackgroundColor = 15,
/// The color for buttons on the nav bar.
  PEBrandedColorBarButtonColor = 16,
/// The color of the nav bar.
  PEBrandedColorBarTintColor = 17,
/// The color for text on the nav bar.
  PEBrandedColorBarTextColor = 18,
/// The color used as the background for the home page header and other headers across the app.
  PEBrandedColorHeaderBackgroundColor = 19,
/// The color used for header text.
  PEBrandedColorHeaderTextColor = 20,
/// The color for the “I have questions” button in the Education activity.
  PEBrandedColorInconclusiveButtonColor = 21,
/// The color used as the background for informational banners and other views with “informational” content.
  PEBrandedColorInformationalBackgroundColor = 22,
/// The color for links.
  PEBrandedColorLinkColor = 23,
/// The  color of the login button on the login screen.
  PEBrandedColorLoginButtonColor = 24,
/// The color of the text on the login button on the login screen.
  PEBrandedColorLoginButtonTextColor = 25,
/// The color used as the background for critical banners and other views with “negative” content.
  PEBrandedColorNegativeBackgroundColor = 26,
/// The color of buttons that perform a “negative” or “destructive” action.
  PEBrandedColorNegativeButtonColor = 27,
/// The color of the text on buttons that perform a “negative” or “destructive” action.
  PEBrandedColorNegativeButtonTextColor = 28,
/// The color for “negative” or “destructive” text.  Also used for link-style buttons.
  PEBrandedColorNegativeTextColor = 29,
/// The color of buttons that perform an action that is neither “positive” or “negative”.
  PEBrandedColorNeutralButtonColor = 30,
/// The color of the text on buttons that perform an action that is neither “positive” or “negative”.
  PEBrandedColorNeutralButtonTextColor = 31,
/// The color used as the background for success banners and other views with “positive” content.
  PEBrandedColorPositiveBackgroundColor = 32,
/// The color of buttons that perform a “positive” or “progressive” action.
  PEBrandedColorPositiveButtonColor = 33,
/// The color of the text on buttons that perform a “positive” or “advancing” action.
  PEBrandedColorPositiveButtonTextColor = 34,
/// The  color of the sign up button on the login screen.
  PEBrandedColorSignupButtonColor = 35,
/// The color of the text on the sign up button on the login screen.
  PEBrandedColorSignupButtonTextColor = 36,
/// The color used for the item that is currently selected on a tab bar.
  PEBrandedColorTabBarSelectedItemColor = 37,
/// The color used to tint icons, controls, and other elements across the app.
  PEBrandedColorTintColor = 38,
/// The color used for the “unread” state of the unread indicator.
  PEBrandedColorUnreadIndicatorColor = 39,
/// The color of the dot used for the “unread” state of the unread indicator.
  PEBrandedColorUnreadIndicatorDotColor = 40,
/// The color used as the background for warning banners and other views with “cautionary” content.
  PEBrandedColorWarningBackgroundColor = 41,
};

enum PEComponentAccessResult : NSInteger;
@protocol PECareTeamComponentDelegate;

SWIFT_PROTOCOL("_TtP6PECore30PECareTeamComponentAPIProtocol_")
@protocol PECareTeamComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the care team activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForCareTeam:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the care team view controller
/// \param patientContext The patient context with which to launch the care team
///
/// \param isPrimaryStandalone Whether the view is  standalone
///
/// \param delegate Delegate to use to retrieve the view controller
///
///
/// returns:
/// The care team view controller
- (void)getCareTeamViewController:(PEPatientContext * _Nonnull)patientContext isPrimaryStandalone:(BOOL)isPrimaryStandalone withDelegate:(id <PECareTeamComponentDelegate> _Nullable)delegate;
/// Determines whether the treatment team activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForTreatmentTeam:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the treatment team view controller
/// \param encounterContext The encounter context with which to launch the treatment team
///
/// \param componentHost The host for this component
///
/// \param viewControllerTitle The title for the treatment team list view controller that should be displayed in the app bar (will be passed to it, but not displayed in this widgette)
///
///
/// returns:
/// The treatment team view controller
- (UIViewController * _Nullable)getTreatmentTeamViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the treatment team list view controller (either a table view or collection view showing all members, as opposed to the widget style view)
/// \param encounterContext The encounter context with which to launch the treatment team
///
/// \param componentHost The host for this component
///
/// \param viewControllerTitle The title for the treatment team list view controller that should be displayed in the app bar
///
///
/// returns:
/// The treatment team list view controller
- (UIViewController * _Nullable)getTreatmentTeamListViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the outpatient-only care team activity
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     patientContext: patient whose care team to get
///   </li>
///   <li>
///     viewControllerTitle: The title for the care team list view controller that should be displayed in the app bar
///   </li>
/// </ul>
///
/// returns:
/// full-screen care team view controller
- (UIViewController * _Nullable)getFullscreenCareTeamViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the provider bio activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForProviderBio:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the provider biography view controller
/// \param encounterContext The encounter context with which to launch the provider bio
///
/// \param providerID The ID of the provider for whom to load a bio
///
///
/// returns:
/// The provider bio view controller
- (UIViewController * _Nullable)getProviderBioViewController:(PEEncounterContext * _Nonnull)encounterContext providerID:(NSString * _Nonnull)providerID SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

SWIFT_PROTOCOL("_TtP6PECore27PECareTeamComponentDelegate_")
@protocol PECareTeamComponentDelegate
/// Callback for when the care team controller was successfully generated and loaded
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         careTeamViewController: The care team view controller
///       </li>
///       <li>
///         failedOrgs: List of external organizations that incurred a failure
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didGetCareTeamViewController:(UIViewController * _Nonnull)careTeamViewController withFailedOrgs:(NSArray<id <PEOrganizationInfoProtocol>> * _Nullable)failedOrgs;
/// Callback for when the care team controller could not be generated. This could be because the patient does not have access, the web-service failed, or because the patient does not have anyone in thier care team.
/// \param error The error that occured
///
- (void)didFailToGetCareTeamViewControllerWithError:(NSError * _Nonnull)error;
@end

/// Enum for component API interfaces. Used as a unique identifier for the component APIs.
typedef SWIFT_ENUM(NSInteger, PEComponentAPIKey, open) {
  PEComponentAPIKeyShareEverywhere = 0,
  PEComponentAPIKeyToDo = 1,
  PEComponentAPIKeyAppointments = 2,
  PEComponentAPIKeyQuestionnaires = 3,
  PEComponentAPIKeyTrackMyHealth = 4,
  PEComponentAPIKeyToDoBridging = 5,
  PEComponentAPIKeyMyChartNow = 6,
  PEComponentAPIKeyCareTeam = 7,
  PEComponentAPIKeyEducation = 8,
  PEComponentAPIKeyProblemList = 9,
  PEComponentAPIKeyProblemListBridging = 10,
  PEComponentAPIKeyHappeningSoon = 11,
  PEComponentAPIKeyMedications = 12,
  PEComponentAPIKeyMedicationsBridging = 13,
  PEComponentAPIKeyTestResults = 14,
  PEComponentAPIKeyTestResultDetail = 15,
  PEComponentAPIKeyH2GOrgPopup = 16,
  PEComponentAPIKeyDateUtilBridging = 17,
  PEComponentAPIKeyHomePage = 18,
  PEComponentAPIKeyApplication = 19,
  PEComponentAPIKeyDeepLinkManager = 20,
  PEComponentAPIKeyAuthentication = 21,
  PEComponentAPIKeyManageMyAccount = 22,
  PEComponentAPIKeyPreventiveCare = 23,
  PEComponentAPIKeyMyChartRef = 24,
  PEComponentAPIKeyMessages = 25,
  PEComponentAPIKeyUpcomingOrders = 26,
  PEComponentAPIKeyScheduling = 27,
  PEComponentAPIKeyNativeMessages = 28,
  PEComponentAPIKeyInfectionControl = 29,
  PEComponentAPIKeyContinuingCare = 30,
};



/// Component API Provider
/// This class allows components to communicate with other components.  See this wiki for how to create new components: http://wiki.epic.com/main/MyChart/Mobile/Components
/// In order to create a new component:
/// <ol>
///   <li>
///     Define your IComponentAPI, create an interface in com.epic.patientengagementcore.component that extends
///     IComponentAPI and define methods other components need to communicate to the new component.
///   </li>
///   <li>
///     Create your ComponentAPI in your component module
///   </li>
///   <li>
///     Add a new enum value to PEComponentAPIKey for your new ComponentAPI
///   </li>
///   <li>
///     Register the component using registerComponentAPI (Most likely in the same spot as all the other components)
///   </li>
/// </ol>
/// In order to call into another component, get the IComponentAPI using getComponentAPI.
SWIFT_CLASS("_TtC6PECore22PEComponentAPIProvider")
@interface PEComponentAPIProvider : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// The component API provider instance
+ (PEComponentAPIProvider * _Nonnull)getComponentAPIProvider SWIFT_WARN_UNUSED_RESULT;
/// Register a new IComponentAPI.
/// \param componentKey The class type of IComponentAPI
///
/// \param component The component api instance
///
///
/// throws:
/// Can not be null or already registered.
- (BOOL)register:(enum PEComponentAPIKey)componentKey :(id <PEComponentAPIProtocol> _Nonnull)component error:(NSError * _Nullable * _Nullable)error;
/// Get a registered component for type
/// \param componentType The class type of IComponentAPI
///
///
/// returns:
/// The component, if registered.
- (id <PEComponentAPIProtocol> _Nullable)get:(enum PEComponentAPIKey)componentType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEComponentAccessResult, open) {
  PEComponentAccessResultAccessAllowed = 1,
  PEComponentAccessResultNotAuthenticated = 2,
  PEComponentAccessResultMissingServerUpdate = 3,
  PEComponentAccessResultMissingSecurity = 4,
  PEComponentAccessResultMissingAppPermissions = 5,
  PEComponentAccessResultUserDisabledSetting = 6,
  PEComponentAccessResultDeprecated = 7,
  PEComponentAccessResultUnknownError = 8,
};

@protocol PEComponentHostSharedAnimationElementProtocol;

/// Component Host protocol.  Most/Some component fragments look for this in order to handle errors,
/// navigation, and other UI functions that the containing view controller should control.
SWIFT_PROTOCOL("_TtP6PECore23PEComponentHostProtocol_")
@protocol PEComponentHostProtocol
/// Handle a generic web service failure
/// -returns: If something was presented to the user
- (BOOL)handleWebServiceTaskFailed SWIFT_WARN_UNUSED_RESULT;
/// Handle a generic web service failure and close the viewcontroller in the end
/// -returns: If something was presented to the user
- (BOOL)handleWebServiceTaskFailedAndClose SWIFT_WARN_UNUSED_RESULT;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// This version includes an origin view in case the host wants to launch the view as a popover
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType from:(UIView * _Nonnull)originView;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// This version includes shared elements for use in shared element transition animations
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType withSharedElements:(NSArray<id <PEComponentHostSharedAnimationElementProtocol>> * _Nonnull)sharedElements andBoundingElement:(id <PEComponentHostSharedAnimationElementProtocol> _Nullable)boundingElement;
/// Wrap a given viewcontroller in a WPViewController
/// Needed for showing navigationbar title view
/// -returns: WPViewController wrapping the parameter view controller
- (UIViewController * _Nonnull)wrapViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// Wrap a given viewcontroller in a WPViewController
/// Needed for showing navigationbar title view
/// -returns: WPViewController wrapping the parameter view controller
- (UIViewController * _Nonnull)wrapViewController:(UIViewController * _Nonnull)viewController inNavigationController:(BOOL)inNavigationController SWIFT_WARN_UNUSED_RESULT;
/// Wrap a given viewcontroller in a WPViewController
/// Needed for showing navigationbar title view
/// -returns: WPViewController wrapping the parameter view controller
- (UIViewController * _Nonnull)wrapViewController:(UIViewController * _Nonnull)viewController inNavigationController:(BOOL)inNavigationController showImageOnTheRight:(BOOL)showImageOnTheRight SWIFT_WARN_UNUSED_RESULT;
/// Dismiss a given viewcontroller
/// Needed so that Bedside and MyChart can dismiss view controllers differently
- (void)dismissViewController:(UIViewController * _Nonnull)viewController;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEComponentHostPopupProtocol_")
@protocol PEComponentHostPopupProtocol <PEComponentHostProtocol>
/// Hide the close button in a component host popup
- (void)disableCloseButton;
/// Show the close button in a component host popup after it’s been hidden
- (void)reenableCloseButton;
@end



/// A shared element to use for animations when launching a new view controller
SWIFT_PROTOCOL("_TtP6PECore45PEComponentHostSharedAnimationElementProtocol_")
@protocol PEComponentHostSharedAnimationElementProtocol
/// The view in the launching view controller
@property (nonatomic, readonly, strong) UIView * _Nonnull fromView;
/// A unique integer tag matching a view in the view controller being launched
@property (nonatomic, readonly) NSInteger toViewTag;
@end

/// Enum Error codes returned when requesting access to activities asynchronously (see WPAPIGoals, WPAPICareTeam, and WPAPICampaigns)
typedef SWIFT_ENUM(NSInteger, PEComponentRequestControllerErrorCode, open) {
/// unknown The request for a controller failed for an unknown reason.
  PEComponentRequestControllerErrorCodeUnknown = -1,
/// noAccess The user does not have access to the activity.
  PEComponentRequestControllerErrorCodeNoAccess = 1,
/// noData There is no data to display for the requested activity.
  PEComponentRequestControllerErrorCodeNoData = 2,
};

@protocol PEOrganizationProtocol;
@protocol PEUserProtocol;
@protocol PEEncounterProtocol;

/// Context Provider
/// This singleton is responsible for providing user context.
/// In order to get a context, call one of the getContext methods.
/// In order to set up the context (or update) call the update methods.
SWIFT_CLASS("_TtC6PECore17PEContextProvider")
@interface PEContextProvider : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// Returns the context provider for the app
+ (PEContextProvider * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
/// -returns: the base context which is the PEOrganizationContext if one exists
- (PEOrganizationContext * _Nullable)getContext SWIFT_WARN_UNUSED_RESULT;
/// \param organization The organization for the UserCOntext
///
///
/// returns:
/// the user contexts for the org
- (NSArray<PEUserContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// \param organization The organization for the UserCOntext
///
/// \param user The user for the UserContext
///
///
/// returns:
/// the user context if one is set up.
- (PEUserContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user SWIFT_WARN_UNUSED_RESULT;
/// \param organization The org for the PatientContext
///
/// \param user The user for the PatientCOntext
///
/// \param patient The patient for the PatientContext
///
///
/// returns:
/// a PatientContext for a specific patient
- (PEPatientContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the PatientContexts
///
/// \param user user for the PatientContexts
///
///
/// returns:
/// a list of all the PatientContexts available, null if no patients or user
- (NSArray<PEPatientContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the encounter context
///
/// \param user user for the encounter context
///
/// \param patient patient for the encounter context
///
/// \param encounter encounter for the encounter context
///
///
/// returns:
/// EncounterContext if one is set up for a patient and encounter
- (PEEncounterContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient :(id <PEEncounterProtocol> _Nullable)encounter SWIFT_WARN_UNUSED_RESULT;
- (PEEncounterContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient encounterIdentifier:(NSString * _Nullable)encounterIdentifier SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the encounter context
///
/// \param user user for the encounter context
///
/// \param patient patient for the encounter context
///
///
/// returns:
/// Encounter contexts if one is set up for a patient and encounters
- (NSArray<PEEncounterContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// Update the organization in the context, this overwrites the current organization
/// \param organization The new org
///
- (void)updateOrganization:(id <PEOrganizationProtocol> _Nullable)organization;
/// Update the user in the context, This overwrites the current user.
/// \param organization Update users for this org 
///
/// \param users The new users for org 
///
- (void)updateUser:(id <PEOrganizationProtocol> _Nullable)organization :(NSArray<id <PEUserProtocol>> * _Nullable)users;
/// Update the list of patients in the context, this overwrites the current patients.
/// \param organization Update for this org
///
/// \param user Update for this user
///
/// \param patients Update with these patients
///
- (void)updatePatients:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(NSArray<id <PEPatientProtocol>> * _Nullable)patients;
/// Update the list of encounters in the context, this overwrites the current encounters.
/// \param organization Update for this org
///
/// \param user Update for this user
///
/// \param patient Update for this patient
///
/// \param encounters Update with these encounters
///
- (void)updateEncounters:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient :(NSArray<id <PEEncounterProtocol>> * _Nullable)encounters;
/// Clear the Context Provider (use for logout)
- (void)clearContext;
/// Package private helper for Context objects to get the real encounter data.
/// \param organizationIdentifer The org’s identifier
///
/// \param userIdentifier The user’s identifier
///
/// \param patientIdentifier The patient’s identifier
///
/// \param encounterIdentifier The encounter’s identifier
///
///
/// returns:
/// the real encounter object
- (id <PEEncounterProtocol> _Nullable)getEncounter:(NSString * _Nullable)organizationIdentifer :(NSString * _Nullable)userIdentifier :(NSString * _Nullable)patientIdentifier :(NSString * _Nullable)encounterIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEContinuingCareComponentAPIProtocol_")
@protocol PEContinuingCareComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to the continuing care activity
/// \param encounterContext The encounter context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForContinuingCare:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO continuing care  activity for a given encounter context
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle the title for the view controller
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getContinuingCareViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO continuing care list activity for a given encounter context and deep link
/// \param encounterContext The encounter context to display
///
/// \param epicHttpLink the url for the list that we’re opening
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getOpenListViewController:(PEEncounterContext * _Nonnull)encounterContext epicHttpLink:(NSString * _Nonnull)epicHttpLink SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore24PEDeepLinkActionDelegate_")
@protocol PEDeepLinkActionDelegate
/// Callback upon tapping of an epichttp or epicmychart deep link
/// \param params a params dictionary containing url, wprid, feature, csn, dat, orderid, mid (all in lowercase)
///
///
/// returns:
/// whether the listener handled the epichttp or epicmychart deep link or ignored it
- (BOOL)didInvokeDeepLink:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
@end

@class UINavigationController;

SWIFT_PROTOCOL("_TtP6PECore30PEDeepLinkComponentAPIProtocol_")
@protocol PEDeepLinkComponentAPIProtocol <PEComponentAPIProtocol>
/// Launch a deep link
/// \param url epichttp url to launch
///
/// \param person person context for launch
///
/// \param orgId org ID if launching to external context
///
/// \param navigationController the navigation controller to launch the activity into
///
///
/// returns:
/// whether the activity was successfully launched
- (BOOL)launchActivityFor:(NSString * _Nonnull)url andFor:(id <PEPersonProtocol> _Nonnull)person orgId:(NSString * _Nullable)orgId into:(UINavigationController * _Nonnull)navigationController;
/// Returns the current delegate listening to deep links
- (id <PEDeepLinkActionDelegate> _Nullable)getDeepLinkActionDelegate SWIFT_WARN_UNUSED_RESULT;
/// Construct the deep link url starting with epichttp://
/// \param feature feature for the deep link activity
///
/// \param queryParams the dictionary containing key and value pairs for query parameters
///
///
/// returns:
/// the complete epichttp deep link url
- (NSString * _Nonnull)constructEpicHttpDeepLinkUrlWithFeature:(NSString * _Nonnull)feature queryParams:(NSDictionary<NSString *, NSString *> * _Nullable)queryParams SWIFT_WARN_UNUSED_RESULT;
/// Checks security for the activity corresponding to the given epichttp deep link, and returns the appropriate view controller
/// \param deepLink the epichttp deep link for the activity to be opened. This can be a manually constructed deep link, or one of the WPAPIActivity constants. 
///
///
/// returns:
/// a view controller for the appropriate activity if the person has access, nil otherwise
- (UIViewController * _Nullable)getViewControllerForActivityWithDeepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
@end

/// Style of button shown by the website.
typedef SWIFT_ENUM(NSInteger, PEEducationButtonStyle, open) {
/// Show no buttons to the user.
  PEEducationButtonStyleNone = 0,
/// Show buttons that can only be clicked once, and their result is saved. Subsequent clicks of the same button have no effect.
  PEEducationButtonStyleCompletion = 1,
/// Show buttons that save the result when clicked, but clicking the button again will remove the result.
  PEEducationButtonStyleToggle = 2,
};

@protocol PEEducationPointCompletionDelegate;
@class NSNumber;

/// The Interface for the Education component
SWIFT_PROTOCOL("_TtP6PECore31PEEducationComponentAPIProtocol_")
@protocol PEEducationComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForOutpatientEducation:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForInpatientEducation:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This method provides the first view controller for the Education component, in the in patient case,
/// the list of all the assigned education titles in a current encounterContext
/// \param encounterContext An encounter context
///
/// \param viewControllerTitle The title for the education titles  view controller that should be displayed in the app bar
///
///
/// returns:
/// The Home screen of the Education activity, the list of all education titles assigned to the patient
- (UIViewController * _Nullable)getInpatientEducationTitlesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// This method provides the first view controller for the Education component, in the out patient case,
/// the list of all the assigned education titles in a current patientContenxt
/// \param patientContext An encounter context
///
/// \param viewControllerTitle The title for the education titles  view controller that should be displayed in the app bar
///
///
/// returns:
/// The Home screen of the Education activity, the list of all education titles assigned to the patient
- (UIViewController * _Nullable)getOutpatientEducationTitlesViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param userContext The context for the user
///
/// \param patientContext The context for the patient
///
/// \param pointID The education point ID
///
/// \param educationTitle The title of the education point being displayed
///
/// \param completionDelegate An optional delegate to handle completion of the education point
///
/// \param shouldLauncMedicalAdviceMessageComposer Whether or not the web view should open the medical composer view when I have questions is clicked by the user. A popup is shown directing the user to contact their organization directly.
///
/// \param buttonStyle Style of button to be shown by the web view. This is sent as part of the request and is handled by web.
///
/// \param educationKey The education key of the education point to display (“titleID^topicID^pointID”)
///
///
/// returns:
/// A view controller for this component. It’s the caller’s responsibility to put it in a host ViewController.
- (MyChartWebViewController * _Nullable)getEducationPointViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext pointID:(NSString * _Nonnull)pointID educationTitle:(NSString * _Nonnull)educationTitle completionDelegate:(id <PEEducationPointCompletionDelegate> _Nullable)completionDelegate shouldLaunchMedicalAdviceMessageComposer:(BOOL)shouldLaunchMedicalAdviceMessageComposer buttonStyle:(enum PEEducationButtonStyle)buttonStyle pointStatus:(NSNumber * _Nullable)pointStatus educationKey:(NSString * _Nonnull)educationKey SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEEducationPointCompletedStatus, open) {
  PEEducationPointCompletedStatusUnread = 0,
  PEEducationPointCompletedStatusRead = 1,
  PEEducationPointCompletedStatusDone = 2,
  PEEducationPointCompletedStatusHidden = 3,
  PEEducationPointCompletedStatusQuestion = 4,
};


/// Interface for the callbacks for the EducationWebViewManager to its parent view.
SWIFT_PROTOCOL("_TtP6PECore34PEEducationPointCompletionDelegate_")
@protocol PEEducationPointCompletionDelegate
/// \param status The completion status of the education point
/// Delegate callbacks Used by ToDo & Education for reporting the completion status of a point
///
- (void)educationPointCompletedWithStatus:(enum PEEducationPointCompletedStatus)status;
@optional
/// Callback for when the user navigates away from an educaiton point
- (void)userDidNavigateAwayFromPoint;
/// Callback for when the user navigates back to an education point
- (void)userDidNavigateBackToPoint;
@end


SWIFT_PROTOCOL("_TtP6PECore24PEEncounterAlertProtocol_")
@protocol PEEncounterAlertProtocol <PEAlertProtocol>
- (NSInteger)getEncounterAlertCount SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEncounterCsn SWIFT_WARN_UNUSED_RESULT;
@end


/// Context for a specific org
SWIFT_CLASS("_TtC6PECore21PEOrganizationContext")
@interface PEOrganizationContext : NSObject
///
/// returns:
/// the user data for a PEOrganizationContext
- (NSArray<id <PEUserProtocol>> * _Nullable)getUsers SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The organization data for a PEOrganizationContext
- (id <PEOrganizationProtocol> _Nullable)getOrganization SWIFT_WARN_UNUSED_RESULT;
/// \param object Check against
///
///
/// returns:
/// true, only if it is a OrganizationContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Context for a user
SWIFT_CLASS("_TtC6PECore13PEUserContext")
@interface PEUserContext : PEOrganizationContext
/// Is the user a proxy (and has proxy subjects)
@property (nonatomic) BOOL hasProxySubjects;
///
/// returns:
/// the user data for a UserContext
- (id <PEUserProtocol> _Nullable)getUser SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of patients for a UserContext
- (NSArray<id <PEPatientProtocol>> * _Nullable)getPatients SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The npp-inclusive list of patients. this[0] is either a user or patient
- (NSArray<id <PEPersonProtocol>> * _Nonnull)getPersonList SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     returns true, only if it is a UserContext (Not subclass, and identifiers are identical)
///   </li>
/// </ul>
/// \param object compare too
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, and user ids regardless of class hierarchy
- (BOOL)isSameUserAs:(PEUserContext * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Context for a specific patient.
SWIFT_CLASS("_TtC6PECore16PEPatientContext")
@interface PEPatientContext : PEUserContext
///
/// returns:
/// The patient data for a PatientContext
- (id <PEPatientProtocol> _Nullable)getPatient SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The encounter list data for a PatientContext
- (NSArray<id <PEEncounterProtocol>> * _Nullable)getEncounters SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// If the Patient/User combo is a proxy context
- (BOOL)isPatientProxy SWIFT_WARN_UNUSED_RESULT;
/// \param object compare too
///
///
/// returns:
/// true, only if it is a UserContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, user, and patient ids regardless of class hierarchy
- (BOOL)isSamePatientAs:(PEPatientContext * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Encounter context
SWIFT_CLASS("_TtC6PECore18PEEncounterContext")
@interface PEEncounterContext : PEPatientContext
///
/// returns:
/// The encounter data for a EncounterContext
- (id <PEEncounterProtocol> _Nullable)getEncounter SWIFT_WARN_UNUSED_RESULT;
/// \param object compare too
///
///
/// returns:
/// true, only if it is a EncounterContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, user, patient, and encounter ids regardless of class hierarchy
- (BOOL)isSameEncounterAs:(PEEncounterContext * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
@end

enum UrlType : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore19PEEncounterProtocol_")
@protocol PEEncounterProtocol
///
/// returns:
/// Unique identifier for encounter
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The Now context for the encounter
- (NSString * _Nonnull)getNowContext SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The destination location for this encounter
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The universal contact identifier (UCI) for this encounter
- (NSString * _Nonnull)getUniversalIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the encounter’s current alerts
- (NSArray<id <PEEncounterAlertProtocol>> * _Nonnull)getAlertsWithPatient:(id <PEPatientProtocol> _Nonnull)patient SWIFT_WARN_UNUSED_RESULT;
@end


/// An class that implements Error to easily transfer Typed, meaningful errors encountered
/// while parsing the request or response, or to wrap received errors from the  NSURLErrorDomain,
/// these can be set as the error object easily whenever a WebService failureBlock needs to be called.
SWIFT_CLASS("_TtC6PECore7PEError")
@interface PEError : NSObject
- (NSString * _Nonnull)getMessage SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nullable)getSourceError SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// PECore’s defined Error Types.
typedef SWIFT_ENUM(NSInteger, PEErrorType, open) {
/// This type of <em>PEError</em> is used when there is something wrong with the URL
/// it’s components or it’s params.
  PEErrorTypeURLComposition = 0,
/// This type of <em>PEError</em> is used when a urlTemplate needs the patient index
/// but it is not available from the Context in WebService. This happens when the
/// template has the {PatientIndex} in it but the index cannot be obtained.
  PEErrorTypePatientIndexNotFound = 1,
/// This type of <em>PEError</em> is used whenever something goes wrong with encoding
/// or creating the request.
  PEErrorTypeRequestParsing = 2,
/// This type of <em>PEError</em> is used whenever something goes wrong with parsing
/// or decoding the response.
  PEErrorTypeResponseParsing = 3,
/// This type of <em>PEError</em> is used whenever a session task fails with an error
/// that suggests there was some error with the security layer. These may include
/// errors in the NSErrorCocoaDomain like : NSURLErrorSecureConnectionFailed,
/// NSURLErrorServerCertificateHasBadDate, NSURLErrorClientCertificateRequired etc.
/// seealso:
/// PEError.from
  PEErrorTypeWebSecurity = 4,
/// This type of <em>PEError</em> is used when something goes wrong with the client.
/// seealso:
/// PEError.from
  PEErrorTypeWebClient = 5,
/// This type of <em>PEError</em> is used when a response code 401 Unauthorized is received
/// from the server or if errors like NSURLErrorUserAuthenticationRequired are received.
/// seealso:
/// PEError.from
  PEErrorTypeWebClientUnauthorized = 6,
/// This type of <em>PEError</em> is used when the response code is in the 4xx range
/// seealso:
/// PEError.from
  PEErrorTypeWebClientConnection = 7,
/// This type of <em>PEError</em> is used when the response code is 400 Bad Request
/// seealso:
/// PEError.from
  PEErrorTypeWebClientBadRequest = 8,
/// This type of <em>PEError</em> is used when the response code is in the 5xx range
/// seealso:
/// PEError.from
  PEErrorTypeWebServer = 9,
/// This type of <em>PEError</em> is used whenever the dataTask completes with the
/// error : NSURLErrorTimedOut
/// seealso:
/// PEError.from
  PEErrorTypeTimeout = 10,
/// This type of <em>PEError</em> is received whenever network is not available. Some common
/// underlying errors may be : NSURLErrorNotConnectedToInternet, NSURLErrorNetworkConnectionLost etc.
/// seealso:
/// PEError.from
  PEErrorTypeNetworkNotAvailable = 11,
/// This type of <em>PEError</em> is used when the error cannot be categorized as any of the above
/// seealso:
/// PEError.from
  PEErrorTypeUnknown = 12,
};


/// Protocol for getting the view controller for organization refresh
SWIFT_PROTOCOL("_TtP6PECore31PEH2GManageMyAccountAPIProtocol_")
@protocol PEH2GManageMyAccountAPIProtocol <PEComponentAPIProtocol>
/// return the view controller for organization refresh
/// If connecting to an Nov 2019 or later environment, this will return a viewcontroller for a
/// standalone Update My Account activity. Otherwise, it will return a viewcontroller for the Link My Account
/// activity instead.
///
/// returns:
/// UIViewController
- (UIViewController * _Nullable)getManageMyAccountViewControllerWithContext:(enum CommunityUpdateContext)context SWIFT_WARN_UNUSED_RESULT;
/// set the feature we’re displaying the banner
- (void)setFeatureIsCurrentlyCheckingStatusWithFeatureBit:(NSString * _Nonnull)featureBit;
/// launch community loading status request
- (void)launchCommunityLoadingStatusRequest;
/// check if the version support asyn loading
- (BOOL)canAsynLoadingExternalData SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for creating view controller for showing external organization information
SWIFT_PROTOCOL("_TtP6PECore33PEH2GOrgPopupComponentAPIProtocol_")
@protocol PEH2GOrgPopupComponentAPIProtocol <PEComponentAPIProtocol>
/// Get a popup view controller showing a list of H2G organizations with failed connections
/// \param failedOrgsList list of H2G organizations that we failed to connect to
///
/// \param title title of the popup
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GErrorPopupViewControllerForPEH2GFailedOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)failedOrgsList withTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of H2G organizations with failed connections
/// \param orgList list of H2G organizations that we failed to connect to
///
/// \param title title of the popup
///
/// \param shouldShowOrgErrorText false if just the org names should be shown, true if error strings should be used for additional context
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GErrorPopupViewControllerForPEH2GFailedOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)failedOrgsList withTitle:(NSString * _Nonnull)title shouldShowOrgErrorText:(BOOL)shouldShowOrgErrorText SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of H2G organizations
/// \param orgList list of H2G organizations to be shown
///
/// \param title title of the popup
///
/// \param shouldShowUpToDateString Whether to show the refresh date along with the organization’s name
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GOrgPopupViewControllerForPEH2GOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)orgList withTitle:(NSString * _Nonnull)title shouldShowUpToDateString:(BOOL)shouldShowUpToDateString SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for the Happening Soon component
SWIFT_PROTOCOL("_TtP6PECore35PEHappeningSoonComponentAPIProtocol_")
@protocol PEHappeningSoonComponentAPIProtocol <PEComponentAPIProtocol>
/// Finds out whether the user has access to the Happening Soon feature for the given encounter.
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHappeningSoon:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the Happening Soon timeline widgette.
/// \param encounterContext The encounter
///
/// \param componentHost Optionally, the host for this component
///
///
/// returns:
/// the view controller for the widgette
- (UIViewController * _Nullable)getHappeningSoonTimelineWidgetteViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEHealthAdvisoryCompletionDelegate_")
@protocol PEHealthAdvisoryCompletionDelegate
- (void)healthAdvisoryMarkedCompleteWithCompletionDate:(NSDate * _Nonnull)completionDate;
@end


SWIFT_PROTOCOL("_TtP6PECore30PEHomePageComponentAPIProtocol_")
@protocol PEHomePageComponentAPIProtocol <PEComponentAPIProtocol>
/// Get the main homepage view controller
/// \param context The logged-in user’s context
/// <ul>
///   <li>
///     overlay: which screen should appear on top of the homepage
///   </li>
///   <li>
///     selectedPerson: is there a pre-selected person whose context we should launch?
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller displaying the home page
- (UIViewController * _Nonnull)getHomePageFor:(PEUserContext * _Nonnull)context with:(enum HomepageOverlayType)overlay presetPerson:(id <PEPersonProtocol> _Nullable)selectedPerson SWIFT_WARN_UNUSED_RESULT;
/// Called by library
///
/// returns:
/// A view controller displaying the feed.
- (UIViewController * _Nonnull)getHomePageFeedFor:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Called by library. Sets the provided item feed controller to “select” the provided context for a wpr identifier.  This primarily reorders the feed so that the selected person is sorted to the top.
- (void)setHealthFeedContext:(UIViewController * _Nonnull)feed person:(id <PEPersonProtocol> _Nonnull)person;
/// Returns if the patient context has access to this component
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHomePage:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// force the feed to refresh
- (void)invalidateFeed;
/// Get the mobile-optimized personalize shortcuts view controller
/// \param userContext The logged-in user’s context
/// <ul>
///   <li>
///     patientContext: the current patient context
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller for mobile-optimized personalize shortcuts
- (UIViewController * _Nonnull)getPersonalizeShortcutsViewControllerForUserContext:(PEUserContext * _Nonnull)userContext andPatientContext:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns if the user context has access to mobile-optimized personalize shortcuts
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForPersonalizeShortcuts:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Returns the title of the mobile-optimized personalize shortcuts view controller
/// \param userContext The logged-in user’s context
/// <ul>
///   <li>
///     patientContext: the current patient context
///   </li>
/// </ul>
///
///
/// returns:
/// the title
- (NSString * _Nonnull)getPersonalizeShortcutsActivityTitle:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// reload menu and shortcuts from database
- (void)notifyReloadMenu;
/// Sets the Apple Watch status for the current user/org to linked
/// \param userContext The logged-in user’s context
///
/// \param isDismissed Whether or not the Apple Watch card has been dismissed
///
- (void)setAppleWatchCardDismissmal:(PEUserContext * _Nonnull)userContext :(BOOL)isDismissed;
/// Load the menu into memory and indicate whether it was successful
/// \param completion Successful completion
///
- (void)preloadMenuWithCompletion:(void (^ _Nonnull)(BOOL, PEError * _Nonnull))completion;
@end



SWIFT_PROTOCOL("_TtP6PECore38PEInfectionControlComponentAPIProtocol_")
@protocol PEInfectionControlComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to this component
- (enum PEComponentAccessResult)hasAccessForCovidStatus:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show
- (UIViewController * _Nullable)getCovidStatusController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


/// Interface for the callbacks for the LinkTaskWebView to its parent view.
SWIFT_PROTOCOL("_TtP6PECore28PELinkTaskCompletionDelegate_")
@protocol PELinkTaskCompletionDelegate
/// Delegate callbacks Used by ToDo for reporting the complete status of a link task
- (void)linkTaskCompleted;
/// Delegate callbacks Used by ToDo for reporting the skip status of a link task
- (void)linkTaskSkipped;
@end


SWIFT_PROTOCOL("_TtP6PECore12PELocaleInfo_")
@protocol PELocaleInfo
///
/// returns:
/// the fomatter locale specified in the phonebook
- (NSLocale * _Nonnull)getFormatterLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the language locale for the current server
- (NSLocale * _Nonnull)getLanguageLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the pattern given the app’s date formatter
- (NSString * _Nullable)getPatternFromDateFormatTemplate:(NSString * _Nonnull)dateFormatTemplate SWIFT_WARN_UNUSED_RESULT;
@end

@class NSLocale;

SWIFT_CLASS("_TtC6PECore18PELocalizedStrings")
@interface PELocalizedStrings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)initStrings:(enum LocalizedLocale)locale SWIFT_METHOD_FAMILY(none);
/// The locale for the user changed
+ (void)handleLocaleChange:(enum LocalizedLocale)locale;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key :(enum LocalizedLocale)locale SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key :(enum LocalizedLocale)locale :(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.  With parameters in the string
/// \param key The key for the string
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale.  With parameters in the string
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key :(enum LocalizedLocale)locale paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle.  With parameters in the string
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key :(enum LocalizedLocale)locale :(NSBundle * _Nullable)bundle paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
/// \param count the count for the plural string
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count :(enum LocalizedLocale)locale SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count :(enum LocalizedLocale)locale :(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count :(enum LocalizedLocale)locale paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count :(enum LocalizedLocale)locale :(NSBundle * _Nullable)bundle paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Converts an NSLocale object into a LocalizedLocale enum
/// Matches on language and region, and if a special enum isn’t available for region, will default back to the enum to the language
/// \param nsLocale locale object to be converted
///
+ (enum LocalizedLocale)initLocalizedLocaleFrom:(NSLocale * _Nonnull)nsLocale SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Allows the helper init function in the swift enum to be used in objective c
/// Turns a language code such as “en” or “de” and a region code such as “AU” or “GB”
/// into a LocalizedLocale.
/// \param languageCode 2 letter language code in lowercase, such as “en”
///
/// \param regionCode 2 letter region code in uppercase, such as “SG”
///
+ (enum LocalizedLocale)initLocalizedLocaleHelperWithLanguageCode:(NSString * _Nonnull)languageCode regionCode:(NSString * _Nonnull)regionCode SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEMedicationsComponentAPIProtocol_")
@protocol PEMedicationsComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the outpatient medications activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForOutpatientMedications:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the encounter-specific medications activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForEncounterSpecificMedications:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the MyChart Now medications view controller
/// \param encounterContext The encounter context with which to launch the problem list
///
/// \param viewControllerTitle The title for the MyChart Now medications view controller that should be displayed in the app bar
///
///
/// returns:
/// MyChart Now Medications view controller
- (UIViewController * _Nullable)getMyChartNowMedicationsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore41PEMedicationsComponentBridgingAPIProtocol_")
@protocol PEMedicationsComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getMedicationsViewControllerForMCNOutPatient SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getMedicationsViewControllerForRefillWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldDisableOutpatientMeds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore17PEMessageProvider_")
@protocol PEMessageProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isPCP;
@property (nonatomic, readonly, copy) NSString * _Nonnull photoURL;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@property (nonatomic, readonly) BOOL isProviderIdEncrypted;
@end


SWIFT_PROTOCOL("_TtP6PECore31PEMessagingComponentAPIProtocol_")
@protocol PEMessagingComponentAPIProtocol <PEComponentAPIProtocol>
/// Checks whether the patient has access to send a medical advice message
/// \param patientContext The patient context to check
///
///
/// returns:
/// Whether the patient has access to send a medical advice message
- (enum PEComponentAccessResult)hasAccessForSendingMedicalAdviceMessage:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Checks whether the patient has access to MO Messages
/// \param patientContext The patient context to check
///
///
/// returns:
/// whether the patient has access to MO Messages
- (enum PEComponentAccessResult)hasAccessForMOMessages:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch into the messages list activity
/// \param patientContext The patient context  for the patient accessing messages
///
///
/// returns:
/// A view controller to launch the messages list activity
- (UIViewController * _Nullable)getMessageListViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch message detail for a single message
/// \param patientContext The patient context for the patient accessing the message detail
///
/// \param messageID The encrypted messageID of the message to launch details for
///
/// \param myChartWebMessageIDKey The key that is used to place the messageId in the MyChartWebArgs as a parameter
///
/// \param h2gLaunchFromLocalOrg Indicating whether the MO Jump should happen locally
///
/// \param isEncrypted Boolean indicating whether the message ID is encrypted
///
/// \param orgID Organization ID of the external organization for Happy Together messages
///
///
/// returns:
/// A view controller to launch into message details for the passed in message ID
- (UIViewController * _Nullable)getMessageDetailViewController:(PEPatientContext * _Nonnull)patientContext forMessage:(NSString * _Nonnull)messageID myChartWebMessageIDKey:(NSString * _Nonnull)myChartWebMessageIDKey h2gLaunchFromLocalOrg:(BOOL)h2gLaunchFromLocalOrg andIsEncrypted:(BOOL)isEncrypted forOrganization:(NSString * _Nonnull)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message
/// \param patientContext The patient context for the patient composing the message
///
///
/// returns:
/// A view controller to launch into a message compose activity
- (UIViewController * _Nullable)getComposeViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message
/// \param patientContext The patient context for the patient composing the message
///
///
/// returns:
/// A view controller to launch into a medical advice message compose activity
- (UIViewController * _Nullable)getComposeMedicalAdviceViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a customer service message
/// \param patientContext The patient context for the patient composing the message
///
///
/// returns:
/// A view controller to launch into a customer service message compose activity
- (UIViewController * _Nullable)getComposeCustomerServiceViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a billing  customer service message
/// \param patientContext The patient context for the patient composing the message
///
/// \param encryptedAccountID The encrypted billing account ID
///
/// \param encryptedBilligContext The billing type - 1 (PB), 2 (HB), or 3 (SBO)
///
///
/// returns:
/// A view controller to launch into a customer service message compose activity for a billing-related question
- (UIViewController * _Nullable)getComposeBillingCustomerServiceViewController:(PEPatientContext * _Nonnull)patientContext forAccount:(NSString * _Nonnull)encryptedAccountID withType:(NSString * _Nonnull)encryptedBilligContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message to a  provider
/// \param patientContext The patient context for the patient composing the message
///
/// \param provider The provider that will be the recipient of the message
///
///
/// returns:
/// A view controller to launch into a message compose activity for a provider
- (UIViewController * _Nullable)getProviderMessageViewController:(PEPatientContext * _Nonnull)patientContext forProvider:(id <PEMessageProvider> _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message with a predefined subject
/// \param patientContext The patient context for the patient composing the message
///
/// \param subject The subject of the message to send. Note that there is a limit of 2048 characters on the entire URL. So, the subject should not be long enough that the length of the URL exceeds that limit. It is important to factor in the fact that I18N and encryption can cause the length of the subject to increase while populating the subject.
///
/// \param orgID Organization ID of the external organization for Happy Together message compose
///
///
/// returns:
/// A view controller to launch into a message compose activity with the subject
- (UIViewController * _Nullable)getComposeMedicalAdviceWithSubjectViewController:(PEPatientContext * _Nonnull)patientContext withSubject:(NSString * _Nonnull)subject forOrganization:(NSString * _Nonnull)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message with an attachment passed in via a DCS ID
/// \param patientContext The patient context for the patient composing the message
///
/// \param dcsID The DCS ID of the attachment that will be attached
///
- (UIViewController * _Nullable)getComposeMedicalAdviceWithDCSIDViewController:(PEPatientContext * _Nonnull)patientContext withDCSID:(NSString * _Nonnull)dcsID SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PEMyChartNowComponentDelegate;
@class NSDictionary;
@protocol PEMyChartNowSwitcherDelegate;
@protocol PEMyChartNowSwitcherProtocol;
@protocol PEMyChartNowItemFeedThemeProtocol;

SWIFT_PROTOCOL("_TtP6PECore32PEMyChartNowComponentAPIProtocol_")
@protocol PEMyChartNowComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
/// \param delegate The delegate to inform when the activities are loaded
///
- (void)getMyChartNowActivitiesForPatientContext:(PEPatientContext * _Nonnull)patientContext delegate:(id <PEMyChartNowComponentDelegate> _Null_unspecified)delegate;
/// Notifies the MyChart Now component that the patient context has changed
- (void)onPatientContextChanged;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to this component
- (enum PEComponentAccessResult)hasAccessForMyChartNow:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign
- (UIViewController * _Nullable)getMyChartNowFullscreenViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign, for use in the MyChart library
- (UIViewController * _Nullable)getMyChartNowWidgetViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param componentHost The component’s host. Nullable for library support, but the view controller expects this to be set before it’s displayed.
///
///
/// returns:
/// A view controller for this component to show in the classic springboard
- (UIViewController * _Nullable)getMyChartNowClassicViewController:(PEPatientContext * _Nonnull)patientContext componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost SWIFT_WARN_UNUSED_RESULT;
/// Try to get a redirect view controller from an epicmychart deep link
/// \param person The current PEPerson
///
/// \param userInfo The dictionary of userInfo from the deep link
///
///
/// returns:
/// A view controller for the deep link
- (UIViewController * _Nullable)getMyChartNowDeepLinkController:(id <PEPersonProtocol> _Nullable)person userInfo:(NSDictionary * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The current encounter context for this widget
///
/// \param activityDescriptor The activity descriptor corresponding to the MyChartNow Feature
///
/// \param delegate The delegate to inform when the context has been switched
///
///
/// returns:
/// A view controller containing the switcher widget
- (UIView <PEMyChartNowSwitcherProtocol> * _Nonnull)getMyChartNowSwitcherView:(PEEncounterContext * _Nonnull)encounterContext :(NSString * _Nonnull)activityDescriptor :(id <PEMyChartNowSwitcherDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// \param myChartNowContextID The string MyChart Now context ID
///
///
/// returns:
/// The UIImage of the icon to use for this context
- (UIImage * _Nonnull)getMyChartNowIcon:(NSString * _Nonnull)myChartNowContextID SWIFT_WARN_UNUSED_RESULT;
/// \param myChartNowContextID The string MyChart Now context ID
///
///
/// returns:
/// A short string used as part of an accessibility label for the patient tab informing the VoiceOver user about the current now context
- (NSString * _Nonnull)getMyChartNowPatientTabAccessibilityLabel:(NSString * _Nonnull)myChartNowContextID SWIFT_WARN_UNUSED_RESULT;
/// \param myChartNowContextID The string MyChart Now context ID
///
///
/// returns:
/// A string that can be used to describe the non-MyChart Now activity section on the springboard. This string should be used as the heading for any activities meant to be used outside of the MyChart Now encounter.
- (NSString * _Nonnull)getMyChartNowOtherActivityListTitle:(NSString * _Nonnull)myChartNowContextID SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Whether or not MyChart Now has automatically launched for the patient whose chart is being viewed. Reset when the user logs out or switches subjects through the proxy switcher
- (BOOL)getMyChartNowHasShownForCurrPatient SWIFT_WARN_UNUSED_RESULT;
/// \param hasShown True when MCN auto launches, false when current patient changes
///
- (void)setMyChartNowHasShownForCurrPatient:(BOOL)hasShown;
/// \param encounterContext The current encounter context for this instance of MyChart Now
///
/// \param activityDescriptor The string used as the MyChartNowFeatureType descriptor for the activity
///
///
/// returns:
/// The name of the activity to be used as the title text in the header menu banner
- (void)getTitleForMyChartNowActivity:(PEPatientContext * _Nonnull)patientContext :(NSString * _Nonnull)activityDescriptor onTitleValueRetrieved:(void (^ _Nonnull)(NSString * _Nullable))onTitleValueRetrieved;
/// \param patientContext The patient context object
///
///
/// returns:
/// Indirectly (via closures) either the encounter context object or an error event
- (void)getMyChartContextWithPatientContext:(PEPatientContext * _Nonnull)patientContext onComplete:(void (^ _Nonnull)(id <PEEncounterProtocol> _Nullable))onComplete onError:(void (^ _Nonnull)(void))onError;
/// \param myChartNowContextID the string MyChart Now context ID
///
///
/// returns:
/// an object containing theming information for a specific context in the HomePage item feed
- (id <PEMyChartNowItemFeedThemeProtocol> _Nullable)getMyChartNowFeedThemeWithMyChartNowContextID:(NSString * _Nonnull)myChartNowContextID SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the list of MyChart Now context ID strings supported by this version of the component
- (NSArray<NSString *> * _Nonnull)getMyChartNowAvailableContexts SWIFT_WARN_UNUSED_RESULT;
/// Invalidates the “unread” badge associated with a feature
/// \param encounterContext the Encounter context
///
/// \param featureID the String feature ID
///
- (void)invalidateFeatureBadgeWithEncounterContext:(PEEncounterContext * _Nonnull)encounterContext featureID:(NSString * _Nonnull)featureID;
@end


SWIFT_PROTOCOL("_TtP6PECore29PEMyChartNowComponentDelegate_")
@protocol PEMyChartNowComponentDelegate
/// Called when the list of MyChartNow activity descriptors has been loaded
/// \param availableFeatures The list of MyChartNow activity descriptors that will be displayed in the MyChart Now widget
///
- (void)didGetMyChartNowActivities:(NSArray<NSString *> * _Nullable)availableFeatures;
/// Called when there was a problem loading the list of activity descriptors
/// \param errorMessage The error message that was encountered during the activity load
///
- (void)didGetMyChartNowActivitiesError:(NSString * _Nullable)errorMessage;
@end

@class UIColor;

/// Describes the theming and formatting of the home page card
SWIFT_PROTOCOL("_TtP6PECore33PEMyChartNowItemFeedThemeProtocol_")
@protocol PEMyChartNowItemFeedThemeProtocol
///
/// returns:
/// a background image that is displayed at the start (left) of
/// the card header
- (UIImage * _Nullable)getStartBackgroundImage SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a background image that is displayed at the end (right) of
/// the card header
- (UIImage * _Nullable)getEndBackgroundImage SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header background
- (UIColor * _Nonnull)getHeaderBackgroundColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header foreground triangle
- (UIColor * _Nonnull)getHeaderForegroundColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header text color
- (UIColor * _Nonnull)getHeaderTextColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the start date if it exists
- (UIImage * _Nullable)getStartDateIcon SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the location if it exists
- (UIImage * _Nullable)getLocationIcon SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the end date if it exists: String
- (UIImage * _Nullable)getEndDateIcon SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes tags for views within the MyChart Now activity that can be used in shared element transition animations
typedef SWIFT_ENUM(NSInteger, PEMyChartNowSharedAnimationElementViewTag, open) {
  PEMyChartNowSharedAnimationElementViewTagActivityBackground = 96000,
  PEMyChartNowSharedAnimationElementViewTagNavigationBar = 96001,
  PEMyChartNowSharedAnimationElementViewTagHeaderBackground = 96002,
  PEMyChartNowSharedAnimationElementViewTagHeaderStartImage = 96003,
  PEMyChartNowSharedAnimationElementViewTagHeaderEndImage = 96004,
};

/// Describes the context that has been selected with the MyChartNow switcher widget
typedef SWIFT_ENUM(NSInteger, PEMyChartNowSwitcherContext, open) {
  PEMyChartNowSwitcherContextPatient = 1,
  PEMyChartNowSwitcherContextEncounter = 2,
};


SWIFT_PROTOCOL("_TtP6PECore28PEMyChartNowSwitcherDelegate_")
@protocol PEMyChartNowSwitcherDelegate
/// Called when the switcher widget has changed contexts
/// Will be called once when the widget initially loads with the default context
/// \param context The current active context (eg. Encounter)
///
- (void)didSwitchContext:(enum PEMyChartNowSwitcherContext)context;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEMyChartNowSwitcherProtocol_")
@protocol PEMyChartNowSwitcherProtocol
/// The currently selected switcher context
@property (nonatomic, readonly) enum PEMyChartNowSwitcherContext currentContext;
@end


SWIFT_PROTOCOL("_TtP6PECore20PEMyChartNowWidgette_")
@protocol PEMyChartNowWidgette
/// Called when the user taps the header of a MyChart Now widgette
- (void)didTapHeader;
@end


SWIFT_PROTOCOL("_TtP6PECore32PEMyChartRefComponentAPIProtocol_")
@protocol PEMyChartRefComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// The application key for menu filtering [MYCHART, MYCHART IOS]
- (NSArray<NSString *> * _Nonnull)getApplicationKeys SWIFT_WARN_UNUSED_RESULT;
/// Sets the default selected person to bypass the splash screen
/// \param userId the user who is logging in
///
/// \param newDefaultWprId the default selcted person’s WPR
///
- (void)setDefaultPersonWprIdFor:(NSString * _Nonnull)userId newDefaultWprId:(NSString * _Nullable)newDefaultWprId;
/// Gets the default selected person when bypassing the splash screen
/// \param userId the user who is logging in
///
///
/// returns:
/// he default selcted person’s WPR
- (NSString * _Nullable)getDefaultPersonWprIdFor:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The raw value of PESecondaryLoginMethod
- (NSInteger)getAvailableSecondaryLoginMethodsToSetUp SWIFT_WARN_UNUSED_RESULT;
/// Do not show the feed item for secondary login, even if not set
- (void)setPreventSecondaryLoginAlert:(BOOL)preventAlert;
/// Has the user requested not to see the alert for secondary login?
- (BOOL)getPreventSecondaryLoginAlert SWIFT_WARN_UNUSED_RESULT;
/// Get the currently monitored CSN
///
/// returns:
/// returns the CSN, empty string if no monitored appt
- (NSString * _Nonnull)getMonitoredAppointmentCSN SWIFT_WARN_UNUSED_RESULT;
/// Returns if the user context has access to the redesigned Apple Watch app
/// \param userContext The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForAppleWatchRedesign:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Increments the number of logins completed by the user for this device and installation
- (void)incrementLoginCounter;
/// Sets flag that the app review card has been dismissed
- (void)setAppReviewCardDismissWithDismissed:(BOOL)dismissed;
/// Determines if the app review card should be requested from the server
- (BOOL)shouldDisplayAppReviewCard SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore36PENativeMessagesComponentAPIProtocol_")
@protocol PENativeMessagesComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// the native view controller to launch into message compose for a provider
- (UIViewController * _Nullable)getNativeProviderMessageViewControllerWithProvider:(id <PEMessageProvider> _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM(NSInteger, PEOrganizationCustomString, open) {
  PEOrganizationCustomStringShareEverywhereAdditionalText = 1,
  PEOrganizationCustomStringListSeparatorPrimary = 2,
  PEOrganizationCustomStringTestResultsPreText = 3,
  PEOrganizationCustomStringTestResultsPostText = 4,
  PEOrganizationCustomStringDoctorsCommentHeader = 5,
  PEOrganizationCustomStringMedicationsHospitalAdmissionBannerText = 6,
  PEOrganizationCustomStringMedicationsHospitalAdmissionBannerProxyText = 7,
  PEOrganizationCustomStringTestResults = 8,
  PEOrganizationCustomStringShareEverywhere = 9,
  PEOrganizationCustomStringToDo = 10,
  PEOrganizationCustomStringMedications = 11,
  PEOrganizationCustomStringQuestionnaires = 12,
  PEOrganizationCustomStringEVisitName = 13,
  PEOrganizationCustomStringMessages = 14,
  PEOrganizationCustomStringECheckIn = 15,
  PEOrganizationCustomStringSwitchPatients = 17,
  PEOrganizationCustomStringSelectPatientToView = 18,
  PEOrganizationCustomStringSelectPatientToViewAccessibility = 19,
  PEOrganizationCustomStringEmergencyPhoneNumber = 20,
  PEOrganizationCustomStringCovidScreeningStatusLowRisk = 21,
  PEOrganizationCustomStringCovidScreeningStatusMediumRisk = 22,
  PEOrganizationCustomStringCovidScreeningStatusHighRisk = 23,
  PEOrganizationCustomStringCovidPastScreeningStatusLowRisk = 24,
  PEOrganizationCustomStringCovidPastScreeningStatusMediumRisk = 25,
  PEOrganizationCustomStringCovidPastScreeningStatusHighRisk = 26,
};


/// This has been deprecated in favor of a concrete implementation.  See PEOrganizationInfo
SWIFT_PROTOCOL("_TtP6PECore26PEOrganizationInfoProtocol_")
@protocol PEOrganizationInfoProtocol
@property (nonatomic, readonly, copy) NSString * _Nonnull organizationId;
@property (nonatomic, readonly) BOOL isExternal;
@property (nonatomic, readonly, copy) NSString * _Nonnull logoUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull organizationName;
@property (nonatomic, readonly) NSInteger linkStatus;
@property (nonatomic, readonly) enum ExternalOrganizationLinkType organizationLinkType;
@property (nonatomic, readonly, copy) NSDate * _Nullable lastRefreshDate;
@end


/// Information for an organization
SWIFT_CLASS("_TtC6PECore18PEOrganizationInfo")
@interface PEOrganizationInfo : NSObject <ImageDataSource, PEOrganizationInfoProtocol>
@property (nonatomic, copy) NSString * _Nonnull organizationId;
@property (nonatomic) BOOL isExternal;
@property (nonatomic, copy) NSString * _Nonnull logoUrl;
@property (nonatomic, copy) NSString * _Nonnull organizationName;
@property (nonatomic) NSInteger linkStatus;
@property (nonatomic) enum ExternalOrganizationLinkType organizationLinkType;
@property (nonatomic, copy) NSDate * _Nullable lastRefreshDate;
@property (nonatomic, copy) NSString * _Nonnull imageURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum PESupportedFeature : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore22PEOrganizationProtocol_")
@protocol PEOrganizationProtocol
///
/// returns:
/// A unique identifier for this org
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the MyChart Brand Name for the organization
- (NSString * _Nonnull)getMyChartBrandName SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the name of this organization’s website from the phone book
- (NSString * _Nonnull)getWebsiteName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     useDarkLogo: Determines if the dark variant of the default ogo should be used
///   </li>
/// </ul>
///
/// returns:
/// the MyChart large logo for the mychart brand name
- (UIImage * _Nonnull)getBrandLogoWithUseDarkLogo:(BOOL)useDarkLogo SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the MyChart large header art for the homepage
- (void)getBrandHeaderFor:(id <ImageLoaderDelegate> _Nonnull)delegate;
///
/// returns:
/// the image path for website-based images
- (NSString * _Nullable)getBaseImageUrlPath SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The PE Theme for this org.
- (id <PEThemeProtocol> _Nonnull)getTheme SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     supportedFeature: The feature to check
///   </li>
/// </ul>
///
/// returns:
/// true if the feature is supported
- (BOOL)isFeatureAvailable:(enum PESupportedFeature)supportedFeature SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of allowed hosts for webviews inside the app.
- (NSArray<NSString *> * _Nonnull)getAllowedHosts SWIFT_WARN_UNUSED_RESULT;
/// A Custom String for an Org
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     customString: custom string to get
///   </li>
///   <li>
///     defaultValue: default value if key isn’t set
///   </li>
/// </ul>
///
/// returns:
/// the custom string
- (NSString * _Nullable)getCustomString:(enum PEOrganizationCustomString)customString :(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// A Custom String for an Org
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     customString: custom string to get
///   </li>
///   <li>
///     defaultValue: default value if key isn’t set
///   </li>
///   <li>
///     parameters: Map of key, value pairs of parameters
///   </li>
/// </ul>
///
/// returns:
/// the custom string
- (NSString * _Nullable)getCustomString:(enum PEOrganizationCustomString)customString :(NSString * _Nullable)defaultValue :(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of cookies set during the SAML login workflow, that need to be stored to persistent storage.
- (NSArray<NSString *> * _Nullable)getSamlLoginCookiesToPersist SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The domain of the SAML Login page. This is used to determine if cookies set during the SAML login workflow, need to be stored to persistent storage.
- (NSString * _Nullable)getSamlLoginDomainForCookiesToPersist SWIFT_WARN_UNUSED_RESULT;
@end



/// Helper interface to get a patient index from a IPEPatient.  Not all PEPatientProtocol’s need to implement
/// PEPatientIndexProtocol, so check the type of the PEPatientProtocol’s to see if it contains PEPatientIndexProtocol
SWIFT_PROTOCOL("_TtP6PECore22PEPatientIndexProtocol_")
@protocol PEPatientIndexProtocol
- (NSInteger)getPatientIndex SWIFT_WARN_UNUSED_RESULT;
@end


/// This protocol helps bridge demographic information that a non-patient has, even if they don’t have a full patient record.
SWIFT_PROTOCOL("_TtP6PECore16PEPersonProtocol_")
@protocol PEPersonProtocol <NSObject>
/// Gets the person’s unique identifier (user or patient).
///
/// returns:
/// The unique identifier for this person.
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s nickname. If a nickname hasn’t been explicitly chosen for this person, the person’s full name will be returned.
///
/// returns:
/// The nickname chosen for this person, or their full name as a fallback.
- (NSString * _Nullable)getNickname SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s nickname. If a nickname hasn’t been explicitly chosen for this person, the person’s full name will be returned.
/// \param preferRefusalName a boolean indicating whether or not a “refusal” name should be preferred
///
///
/// returns:
/// The nickname chosen for this person, or their full name as a fallback.
- (NSString * _Nullable)getNicknamePreferingRefusalName:(BOOL)preferRefusalName SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s full name.  This will either be the person’s full preferred name or, if a preferred name isn’t on file, the person’s full legal name.
///
/// returns:
/// The full name for this person.
- (NSString * _Nullable)getFullname SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s color.  If a color hasn’t been explicitly chosen for this person, a default color will be returned.
///
/// returns:
/// The color chosen for this person, or a default color as a backup.
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s text color.  If a color hasn’t been explicitly chosen for this person, a default color will be returned.  This may be different than getColor because it will meet Accessibility standards
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
///
/// returns:
/// The photo for this person, or a fallback image with this person’s first initial.
- (UIImage * _Nonnull)getPhoto SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, conditionally, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// \param useFallback a boolean indicating whether or not a fallback image should be returned if the person doesn’t have a photo
///
///
/// returns:
/// The photo for this person, or, depending on parameters, a fallback image with this person’s first initial.
- (UIImage * _Nullable)getPhotoUsingFallback:(BOOL)useFallback SWIFT_WARN_UNUSED_RESULT;
/// Gets the URL to use for web service requests that return data for the person. May return nil to indicate that the default URL for web service requests should be used.
/// \param urlType the type of URL that is being requested
///
///
/// returns:
/// The URL to use for web service requests that return data for the person, or nil to use a default URL.
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
/// Updates the persons’s nickname.
/// \param nickname the new nickname for this person
///
- (void)updateNickname:(NSString * _Nullable)nickname;
/// Updates the index of the person’s color in the set of colors for people.
/// \param colorIndex the new index of a color for this person (1-7)
///
- (void)updateColorIndex:(NSInteger)colorIndex;
/// Updates the person’s photo.
/// \param photo the new photo for this person
///
- (void)updatePhoto:(UIImage * _Nullable)photo;
@end


/// This protocol represents a person who is also a patient.
SWIFT_PROTOCOL("_TtP6PECore17PEPatientProtocol_")
@protocol PEPatientProtocol <PEPersonProtocol>
/// Gets the patient’s WPR ID (or CID).
///
/// returns:
/// The WPR ID (or CID) for this patient.
- (NSString * _Nonnull)getWPRID SWIFT_WARN_UNUSED_RESULT;
/// Checks if a security point is present to access a given feature on behalf of the patient.
/// \param feature the feature to evaluate security for
///
///
/// returns:
/// True IFF the security point is present for the feature; False otherwise.
- (BOOL)hasSecurityPoint:(NSString * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
/// Gets the URL to use for web service requests that return data for the patient. May return null to indicate that the default URL for web service requests should be used.
///
/// returns:
/// True IFF this patient is currently in an ED; False otherwise.
- (BOOL)getIsInED SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not the patient is currently admitted to a hospital or other inpatient facility.
///
/// returns:
/// True IFF this patient is currently admitted to a hospital or other inpatient facility; False otherwise.
- (BOOL)getIsAdmitted SWIFT_WARN_UNUSED_RESULT;
/// Gets the list of alerts for the patient.
///
/// returns:
/// The list of alerts for this patient.
- (NSArray<id <PEAlertProtocol>> * _Nonnull)getAlerts SWIFT_WARN_UNUSED_RESULT;
/// Gets the patient’s MyChart Now context ID, if any.
///
/// returns:
/// This patient’s MyChart Now context ID, or null if the patient is not in a MyChart Now context.
- (NSString * _Nonnull)getNowContext SWIFT_WARN_UNUSED_RESULT;
/// Sets the patient’s MyChart Now context ID
/// \param nowContextId This patient’s MyChart Now context ID, or null if the patient is not in a MyChart Now context.
///
- (void)setNowContext:(NSString * _Nonnull)nowContextId;
@end



SWIFT_PROTOCOL("_TtP6PECore36PEPreventiveCareComponentAPIProtocol_")
@protocol PEPreventiveCareComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to preventive care reminders
/// \param patientContext the patient context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForPreventiveCare:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
/// </ul>
///
/// returns:
/// A view controller displaying the preventive care reminders
- (MyChartWebViewController * _Nullable)getPreventiveCareViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEProblemListComponentAPIProtocol_")
@protocol PEProblemListComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the outpatient problem list activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForOutpatientProblemList:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the encounter-specific problem list activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForEncounterSpecificProblemList:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the encounter-specific problem list view controller
/// \param encounterContext The encounter context with which to launch the problem list
///
/// \param viewControllerTitle The title for the problem list view controller that should be displayed in the app bar
///
///
/// returns:
/// encounter-specific problem list view controller
- (UIViewController * _Nullable)getProblemListViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore41PEProblemListComponentBridgingAPIProtocol_")
@protocol PEProblemListComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (UIViewController * _Nullable)getHealthIssuesViewController SWIFT_WARN_UNUSED_RESULT;
@end


/// A view with a pulsing heart that mimics the loading indicator for mobile optimized views. Use this view as an optional alternative to the standard LoadingIndicator.
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore18PEPulsingHeartView")
@interface PEPulsingHeartView : UIView
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEQuestionnaireCompletionDelegate_")
@protocol PEQuestionnaireCompletionDelegate
/// Called when the user finishes a questionnaire
- (void)questionnaireCompleted;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEQuestionnairesComponentAPIProtocol_")
@protocol PEQuestionnairesComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to patient-level questionnaires
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForPatientQuestionnaires:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to admission-specific questionnaires
/// \param encounterContext the encounter context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForInpatientQuestionnaires:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to a general questionnaire
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForGeneralQuestionnaire:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to a history questionnaire
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForHistoryQuestionnaire:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO questionnaires activity for a given patient context
/// \param patientContext The patient context to display
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getPatientQuestionnairesViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// /// Gets a ViewController that displays the MO questionnaires activity for an admission
/// \param encounterContext the encounter context for the admission
///
/// \param viewControllerTitle The title for the inpatient questionnaires  view controller that should be displayed in the app bar
///
///
/// returns:
/// the ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getInpatientQuestionnairesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Epic HTTP link corresponding to a single questionnaire in a series
/// \param patientContext the patient context to display 
///
/// \param epicHttpLink link to launch once the MO activity is started 
///
///
/// returns:
/// a fragment to display, or null if it’s not a valid request
- (UIViewController * _Nullable)getStartQuestionnaireViewController:(PEPatientContext * _Nonnull)patientContext epicHttpLink:(NSString * _Nonnull)epicHttpLink SWIFT_WARN_UNUSED_RESULT;
/// \param questionnaireID The ID of the questionnaire to display
///
/// \param seriesAnswerID The ID of the questionnaire series answer to display
///
/// \param completionDelegate An optional delegate to handle questionnare completion
///
///
/// returns:
/// A view controller displaying the questionnaire
- (UIViewController * _Nullable)getQuestionnairesViewControllerForQuestionnaire:(NSString * _Nonnull)questionnaireID andSeries:(NSString * _Nonnull)seriesAnswerID patientContext:(PEPatientContext * _Nonnull)patientContext completionDelegate:(id <PEQuestionnaireCompletionDelegate> _Nullable)completionDelegate SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show questionnaires for an upcoming appointment
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a history questionnaire for an upcoming appointment
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getHistoryAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show questionnaires for an upcoming appointment on an old server
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getOldServerAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a questionnaire attached to a message
/// \param messageID the message ID
///
/// \param taskID the task ID for the questionnaire
///
/// \param patientContext the patient context for the message
///
/// \param organization the (external) organization for the message
///
- (UIViewController * _Nonnull)getQuestionnaireMessageTaskViewControllerWithMessageID:(NSString * _Nonnull)messageID taskID:(NSString * _Nonnull)taskID patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a history questionnaire attached to a message
/// \param messageID the message ID
///
/// \param taskID the task ID for the questionnaire
///
/// \param patientContext the patient context for the message
///
/// \param organization the (external) organization for the message
///
- (UIViewController * _Nonnull)getHistoryQuestionnaireMessageTaskViewControllerWithMessageID:(NSString * _Nonnull)messageID taskID:(NSString * _Nonnull)taskID patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaire web view to show a general questionnaire
/// \param patientContext the patient context for the questionnaire
///
/// \param parameters query parameters containing meta data to launch the general questionnaire
///
- (UIViewController * _Nonnull)getGeneralQuestionnaireViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaire web view to show a history questionnaire
/// \param patientContext the patient context for the questionnaire
///
/// \param parameters query parameters containing meta data to launch the history questionnaire
///
- (UIViewController * _Nonnull)getHistoryQuestionnaireViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
@end

/// The format of the request parameters sent with a web request. This enumeration corresponds to
/// processor objects that are of the <em>WebRequestProcessor</em> type.
typedef SWIFT_ENUM(NSInteger, PERequestFormat, open) {
/// the default request type for the service category
  PERequestFormatDefaultForCategory = 0,
/// an HTTP GET request. Parameters will be converted to a query string
  PERequestFormatGet = 1,
/// JSON formatted POST request body
  PERequestFormatJsonPost = 2,
/// JSON formatted POST request body
  PERequestFormatJsonGet = 3,
};

/// The format of a response body returned by a web request. This enumeration corresponds to
/// processor objects defined in the com.epic.patientengagement.core.webservice.processor package of
/// the core library
typedef SWIFT_ENUM(NSInteger, PEResponseFormat, open) {
/// Use the default response type for the service category
  PEResponseFormatDefault = 0,
/// JSON formatted response body
  PEResponseFormatJSON = 1,
/// JSON formatted response body wrapped with the Bedside WcfResponse object in Interconnect
  PEResponseFormatJSONWrappedBedside = 2,
};


SWIFT_PROTOCOL("_TtP6PECore32PESchedulingComponentAPIProtocol_")
@protocol PESchedulingComponentAPIProtocol <PEComponentAPIProtocol>
/// \param reasonForVisit Health maintenance reason for visit to indicate type of appointment to schedule
///
/// \param hmTopicId Health maintenance topic (ini HMT) to indicate type of appointment to schedule
///
/// \param dontEncryptTopic If set to true, do not encrypt topic when generating MyChart URL (set this to true if input hmTopicId is already encrypted)
///
///
/// returns:
/// A view controller for this component using different parameters
- (UIViewController * _Nonnull)getScheduleWebViewControllerWithHMScheduleAppointmentWithReasonForVisit:(NSString * _Nonnull)reasonForVisit hmTopicId:(NSString * _Nonnull)hmTopicId dontEncryptTopic:(BOOL)dontEncryptTopic SWIFT_WARN_UNUSED_RESULT;
/// \param tktId The scheduling ticket ID
///
///
/// returns:
/// A  view controller for this component from a scheduling ticket
- (UINavigationController * _Nonnull)getTicketSchedulingViewControllerWithTicket:(NSString * _Nonnull)tktId SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore37PEShareEverywhereComponentAPIProtocol_")
@protocol PEShareEverywhereComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForShareEverywhere:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getShareEverywhereViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
@end

/// Enum representing supported features that depend on back-end server support.
/// KEEP THESE CONSISTENT WITH ANDROID.
typedef SWIFT_ENUM(NSInteger, PESupportedFeature, open) {
  PESupportedFeatureUnknown = 0,
  PESupportedFeatureShareEverywhere = 1,
  PESupportedFeatureMyC3NotificationSettings = 2,
  PESupportedFeatureHealthAdvisoriesSorted = 3,
  PESupportedFeatureToDo = 5,
  PESupportedFeatureMyC3Personalization = 6,
  PESupportedFeatureMarkHMTopicComplete = 7,
  PESupportedFeatureHappyTogether = 8,
  PESupportedFeatureHomePage = 9,
  PESupportedFeatureProblemList = 10,
  PESupportedFeatureProviderPhotos = 11,
  PESupportedFeatureMyC3TimeZoneCustomization = 12,
  PESupportedFeatureHappeningSoon = 13,
  PESupportedFeatureTestResults = 14,
  PESupportedFeatureMobileOptimizedWeb = 15,
  PESupportedFeatureClinicalInfo = 16,
  PESupportedFeatureTreatmentTeam = 17,
  PESupportedFeatureCareTeamScheduling = 18,
  PESupportedFeatureEncounterMedications = 19,
  PESupportedFeatureMODirectUrl = 20,
  PESupportedFeatureNPPMobileOptimizedWeb = 21,
  PESupportedFeatureEducation = 22,
  PESupportedFeatureTwoFactorOptIn = 23,
  PESupportedFeatureHMScheduling = 24,
  PESupportedFeaturePatientCreatedTasks = 25,
  PESupportedFeatureToDoProgress = 26,
  PESupportedFeatureHappyTogetherActions = 27,
  PESupportedFeatureMyC3TaskTypeNotifications = 28,
  PESupportedFeatureMyC3PushNotificationDeepLink = 29,
  PESupportedFeatureTreatmentTeam2019 = 30,
  PESupportedFeatureGenericMoJump = 31,
  PESupportedFeaturePanelAppointments = 32,
  PESupportedFeatureMOMessages = 33,
  PESupportedFeatureExploreMoreAuditing = 34,
  PESupportedFeatureMOShortcutPersonalization = 35,
  PESupportedFeatureCovidStatus = 36,
  PESupportedFeatureBrandingPathsLookup = 37,
  PESupportedFeatureMOToDoChangeDetails = 38,
  PESupportedFeatureToDoPersistentQuestionnaires = 39,
  PESupportedFeatureToDoPatientCreatedTaskSecurityPoints = 40,
  PESupportedFeatureUpcomingOrders = 41,
  PESupportedFeatureAppleWatchRedesign = 42,
  PESupportedFeatureHPRemoveFunIcons = 43,
  PESupportedFeatureHowToVideos = 44,
  PESupportedFeatureLaunchPreventiveCareForHealthMaint = 47,
  PESupportedFeatureMOPersonalInformation = 46,
  PESupportedFeatureEMMIEducation = 52,
  PESupportedFeatureCovidPDF = 51,
  PESupportedFeatureMOImmunizations = 49,
};


SWIFT_PROTOCOL("_TtP6PECore12PETestResult_")
@protocol PETestResult
@property (nonatomic, readonly, copy) NSString * _Nullable objectID;
@property (nonatomic, readonly, copy) NSString * _Nullable dat;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@end


SWIFT_PROTOCOL("_TtP6PECore38PETestResultDetailComponentAPIProtocol_")
@protocol PETestResultDetailComponentAPIProtocol <PEComponentAPIProtocol>
/// \param testResult the base test result with which to launch the details view controller
///
///
/// returns:
/// A view controller which will show the test result details
- (UIViewController * _Nonnull)getTestResultDetailControllerWithTestResult:(id <PETestResult> _Nonnull)testResult overrideUri:(NSString * _Nonnull)overrideUri componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost patientContext:(PEPatientContext * _Nonnull)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// True if the current patient has access to view test result details
- (BOOL)hasAccessToTestResultDetails SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PETestResultsComponentAPIProtocol_")
@protocol PETestResultsComponentAPIProtocol <PEComponentAPIProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull licenseDenyTestResults;)
+ (NSString * _Nonnull)licenseDenyTestResults SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull testResultViewedNotification;)
+ (NSString * _Nonnull)testResultViewedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull organizationLinkUpdatedNotification;)
+ (NSString * _Nonnull)organizationLinkUpdatedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull communityRefreshBannerNeedUpdate;)
+ (NSString * _Nonnull)communityRefreshBannerNeedUpdate SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull communityNotificationRefreshBannerUpdateKey;)
+ (NSString * _Nonnull)communityNotificationRefreshBannerUpdateKey SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForOutpatientTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param viewControllerTitle The title for the test results view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTestResultsViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore15PEThemeProtocol_")
@protocol PEThemeProtocol
/// Gets a UIColor value for the specified PEBrandedColor.
/// \param color the PEBrandedColor to get a color value for
///
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not the To Do activity should use animated backgrounds and To Do-specific colors.
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not test results should use title casing for display names.
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not onboarding should be displayed for the home page.
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore26PEToDoComponentAPIProtocol_")
@protocol PEToDoComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForToDo:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To Do component
- (UIViewController * _Nullable)getToDoViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Changes
- (enum PEComponentAccessResult)hasAccessForToDoChanges:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Changes
- (enum PEComponentAccessResult)hasAccessForToDoChangeDetails:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The view controller for the To Do Changes activity
- (UIViewController * _Nullable)getToDoChangesViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param ltkID The task ID of the task to be opened after To Do is launched.
///
/// \param ltkInst The task instant of the task to be opened afater To Do is launched
///
///
/// returns:
/// The main view controller for the To Do component
- (UIViewController * _Nullable)getToDoViewControllerDeepLink:(PEPatientContext * _Nonnull)patientContext ltkID:(NSString * _Nonnull)ltkID ltkInst:(NSString * _Nonnull)ltkInst SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To do component, launched into the overdue tasks view
- (UIViewController * _Nullable)getToDoOverdueViewControllerDeepLink:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This function returns the web view controller for showing the change details web page for a chosen To Do change.
/// \param patientContext The patient context 
///
/// \param changeId The ALT id of the change 
///
/// \param changeDAT The DAT of the ALT record of the change 
///
/// \param isEncrypted Boolean indicating whether the ALT ID and DAT are already encrypted 
///
- (UIViewController * _Nullable)getToDoChangeDetailsWebViewController:(PEPatientContext * _Nonnull)patientContext changeId:(NSString * _Nonnull)changeId changeDAT:(NSString * _Nonnull)changeDAT isEncrypted:(BOOL)isEncrypted SWIFT_WARN_UNUSED_RESULT;
/// This function marks the given change as viewed
/// \param patientContext The patient context 
///
/// \param changeId The ALT id of the change 
///
/// \param changeDAT The DAT of the ALT record of the change 
///
/// \param isEncrypted Boolean indicating whether the ALT ID and DAT are already encrypted 
///
- (void)markChangeAsViewed:(PEPatientContext * _Nonnull)patientContext changeId:(NSString * _Nonnull)changeId changeDAT:(NSString * _Nonnull)changeDAT isEncrypted:(BOOL)isEncrypted;
/// This function returns the web view controller for the detail of a Link Task.
/// \param patientContext The patient context 
///
/// \param ltkId The LTK ID of the link task instance 
///
/// \param ltkInstant The instant of the link task instance 
///
/// \param delegate  The delegate to handle completion of the link task 
///
- (UIViewController * _Nullable)getLinkTaskDetailWebViewController:(PEPatientContext * _Nonnull)patientContext ltkId:(NSString * _Nonnull)ltkId ltkInstant:(NSString * _Nonnull)ltkInstant delegate:(id <PELinkTaskCompletionDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEToDoComponentBridgingAPIProtocol_")
@protocol PEToDoComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (NSString * _Nonnull)getQuestionnaireIDFromTaskWithID:(NSString * _Nonnull)taskID atInstant:(NSString * _Nonnull)taskInstant andQuestionnaireIDs:(NSArray<NSString *> * _Nonnull)questionnaireIDs withSeriesID:(NSString * _Nonnull)seriesID SWIFT_WARN_UNUSED_RESULT;
/// \param topicID The ID of the HM topic to display
///
/// \param name The name of the HM topic to display
///
/// \param statusText The status text to display for the HM topic
///
/// \param detailText The detail text to display for the HM topic
///
/// \param completionDelegate An optional completion delegate to handle the completion of the health advisory
///
///
/// returns:
/// A view controller for the HM topic completion workflow.
- (UIViewController * _Nullable)getMarkHealthAdvisoryCompleteViewControllerForTopic:(NSString * _Nonnull)topicID named:(NSString * _Nonnull)name withStatusText:(NSString * _Nonnull)statusText andDetailText:(NSString * _Nonnull)detailText completionDelegate:(id <PEHealthAdvisoryCompletionDelegate> _Nullable)completionDelegate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore35PETrackMyHealthComponentAPIProtocol_")
@protocol PETrackMyHealthComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTrackMyHealthViewController SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PETutorialHostProtocol;
@class PETutorialUIModel;

SWIFT_CLASS("_TtC6PECore20PETutorialController")
@interface PETutorialController : NSObject
/// Initializes the PETutorialController. This method must be called before controller usage
/// \param tutorialHost an object conforming to the PETutorialHostProtocol interface
///
+ (void)initializeWithTutorialHost:(id <PETutorialHostProtocol> _Nullable)tutorialHost;
/// Load a PETutorialUIModel from a JSON resource
/// \param bundle Name of the bundle to load the resource from
///
/// \param fileName Name of the json file
///
///
/// returns:
/// a model containing tutorial data
+ (PETutorialUIModel * _Nullable)loadTutorialFromJsonWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName patientContext:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Load a PETutorialUIModel from a JSON resource
/// \param bundle Name of the bundle to load the resource from
///
/// \param fileName Name of the json file
///
/// \param replacementMap a list of tokens and their replacements to make in the tutorial model
///
///
/// returns:
/// a model containing tutorial data
+ (PETutorialUIModel * _Nullable)loadTutorialFromJsonWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName patientContext:(PEPatientContext * _Nullable)patientContext replacementMap:(NSDictionary * _Nullable)replacementMap SWIFT_WARN_UNUSED_RESULT;
/// Show the most recently registered tutorial
+ (void)showCurrentTutorial;
/// Registers a tutorial, which will be automatically shown if it has not been finished and the application has automatic display configured
/// \param tutorialUIModel a tutorial model
///
+ (void)registerTutorialWithTutorialUIModel:(PETutorialUIModel * _Nullable)tutorialUIModel;
/// Unregisters a tutorial, which will hide it if it’s showing and remove the tutorial registration
/// \param tutorialUIModel a tutorial model
///
+ (void)unregisterTutorialWithTutorialUIModel:(PETutorialUIModel * _Nullable)tutorialUIModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Controls interaction with the PETutorialController and its hosting application
SWIFT_PROTOCOL("_TtP6PECore22PETutorialHostProtocol_")
@protocol PETutorialHostProtocol
/// Notifies the hosting application when a tutorial is available
/// \param available true if a tutorial is available
///
- (void)tutorialIsAvailable:(BOOL)available;
///
/// returns:
/// if tutorials show be shown automatically when registered
- (BOOL)showTutorialsAutomatically SWIFT_WARN_UNUSED_RESULT;
/// Notifies the hosting application that a tutorial has been completed
/// \param tutorialId the ID of the tutorial
///
- (void)didCompleteTutorial:(NSString * _Nullable)tutorialId;
/// \param tutorialId the ID of the tutorial
///
///
/// returns:
/// true if a tutorial has been completed already
- (BOOL)isTutorialCompleted:(NSString * _Nullable)tutorialId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a NSDictionary containing string replacements that should always be made
- (NSDictionary * _Nullable)globalReplacementMap SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore17PETutorialUIModel")
@interface PETutorialUIModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC6PECore24PETutorialViewController")
@interface PETutorialViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEUpcomingOrdersComponentAPIProtocol_")
@protocol PEUpcomingOrdersComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines if the user has access to upcoming orders
/// \param patientContext the current patient context
///
///
/// returns:
/// PEComponentAccessResult.AccessAllowed if the user has access, otherwise various reasons why they cannot
- (enum PEComponentAccessResult)hasAccessForUpcomingOrders:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller for the Upcoming Orders activity
/// \param patientContext the current patient context
///
- (UIViewController * _Nonnull)getUpcomingOrdersViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
@end


/// Stores and provides the default URLs used by the web service engine
SWIFT_CLASS("_TtC6PECore13PEUrlProvider")
@interface PEUrlProvider : NSObject
/// private initializer, only instance <em>instance</em> is available
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <ul>
///   <li>
///     return: the single instance of the <em>PEUrlProvider</em> class
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PEUrlProvider * _Nonnull instance;)
+ (PEUrlProvider * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Sets the default Url for a given <em>UrlType</em>
/// \param type the type of Url destination  to store
///
/// \param url a string containing the url
///
- (void)setUrlWithType:(enum UrlType)type url:(NSString * _Nonnull)url;
/// \param type the Url destination type
///
///
/// returns:
/// a string representing the Url
- (NSString * _Nullable)getUrlStringWithType:(enum UrlType)type SWIFT_WARN_UNUSED_RESULT;
@end


enum TokenType : NSInteger;

/// This protocol represents a person who is also the current MyChart user.
SWIFT_PROTOCOL("_TtP6PECore14PEUserProtocol_")
@protocol PEUserProtocol <PEPersonProtocol>
/// Get the corresponding patient for this user. The patient will be nil if the user is a non-patient proxy (NPP).
///
/// returns:
/// The corresponding patient for this user, if any.
- (id <PEPatientProtocol> _Nullable)getPatient SWIFT_WARN_UNUSED_RESULT;
/// Checks if the user has proper security for a particular feature.
/// \param feature the feature to check
///
///
/// returns:
/// True if the user has security to access the feature; False otherwise.
- (BOOL)hasSecurityPointWithFeature:(NSString * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
/// Gets the current (authentication) token for the specified token type.
/// \param tokenType the type for which to get a token for
///
///
/// returns:
/// The current token for the specified token type.
- (NSString * _Nonnull)getToken:(enum TokenType)tokenType SWIFT_WARN_UNUSED_RESULT;
/// Sets a new (authentication) token with the specified token type.
/// \param token the token to be set
///
/// \param forType the type for which to set the token with
///
- (void)setToken:(NSString * _Nonnull)token forType:(enum TokenType)forType;
/// Gets the current locale string.
///
/// returns:
/// The current locale string.
- (NSString * _Nonnull)getLocaleString SWIFT_WARN_UNUSED_RESULT;
/// Gets the current device ID.
///
/// returns:
/// The current device ID.
- (NSString * _Nonnull)getDeviceID SWIFT_WARN_UNUSED_RESULT;
/// Gets the current app ID.
///
/// returns:
/// The current app ID.
- (NSString * _Nonnull)getAppID SWIFT_WARN_UNUSED_RESULT;
/// Reports whether the user’s session has timed out
///
/// returns:
/// if the user’s session is timed out
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
@end


/// A view for displaying patient/npp photos
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore15PersonImageView")
@interface PersonImageView : UIImageView
/// The border width around the image
@property (nonatomic) IBInspectable CGFloat borderWidth;
/// image views typically return the size of their un-resized image. This returns the actual size of the scaled image
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6PECore15ProgressArcView")
@interface ProgressArcView : UIView
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified baseColor;
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified progressColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6PECore11ProgressBar")
@interface ProgressBar : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Circular image of a provider’s photo, or first initial if the photo cannot be loaded
SWIFT_CLASS("_TtC6PECore17ProviderImageView")
@interface ProviderImageView : UIImageView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@interface ProviderImageView (SWIFT_EXTENSION(PECore)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end


SWIFT_CLASS("_TtC6PECore17SectionHeaderView")
@interface SectionHeaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// An IBDesignable UIView that loads from its own XIB
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore15SelfLoadingView")
@interface SelfLoadingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)prepareForInterfaceBuilder;
@end

enum ToastDuration : NSInteger;

SWIFT_CLASS("_TtC6PECore5Toast")
@interface Toast : UIView
/// Makes an error toast with the provided text and duration.
/// \param text the text to display in the toast
///
/// \param duration the duration to display the toast for
///
///
/// returns:
/// A toast with the provided text and duration.
+ (Toast * _Nullable)makeErrorWithText:(NSString * _Nonnull)text duration:(enum ToastDuration)duration SWIFT_WARN_UNUSED_RESULT;
/// Makes a toast with the provided text and duration.
/// \param text the text to display in the toast
///
/// \param duration the duration to display the toast for
///
///
/// returns:
/// A toast with the provided text and duration.
+ (Toast * _Nullable)makeWithText:(NSString * _Nonnull)text duration:(enum ToastDuration)duration SWIFT_WARN_UNUSED_RESULT;
/// Shows the toast in the application’s key window. Use showInFrontOfKeyboard() instead if you wish to show the toast in front of the onscreen keyboard.
- (Toast * _Nonnull)show;
/// Shows the toast in front of the device keyboard. Call this instead of show() if you want the toast to display in front of the onscreen keyboard.
/// Calling this function instead of show() tells the toast to display on the last accessed window (the keyboard) rather than the key window.
/// Note: Keep in mind the toast will be dismissed early if the keyboard is dismissed (either by the user or programatically)
- (void)showInFrontOfKeyboard;
/// Set a callback for when voiceover has finished reading the prompt. Callback is issued immediately if voiceover is not running.
- (void)onAnnouncementDidFinishNotification:(void (^ _Nonnull)(void))callback;
/// Hides the toast.
- (void)hide;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum representing the valid toast durations
typedef SWIFT_ENUM(NSInteger, ToastDuration, open) {
  ToastDurationShort = 0,
  ToastDurationLong = 1,
};


/// Stores the default tokens in use by the web service engine
SWIFT_CLASS("_TtC6PECore13TokenProvider")
@interface TokenProvider : NSObject
/// private initializer, only instance <em>instance</em> is available
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Types of authentication tokens that are used with Epic endpoints
typedef SWIFT_ENUM(NSInteger, TokenType, open) {
/// Use the token type specified at the category level
  TokenTypeDefault = 0,
/// The MyChart Bedside token type
  TokenTypeBedside = 1,
/// The MyChart Mobile token type
  TokenTypeMyChart = 2,
/// The OAuth2 token type (used by Bedside TV)
  TokenTypeOAuth2 = 3,
};


/// Protocol representing user and system information regarding two-factor authentication.
SWIFT_PROTOCOL("_TtP6PECore28TwoFactorInformationProtocol_")
@protocol TwoFactorInformationProtocol
/// Indicates whether or not the user can opt in-to/out-of two-factor authentication, based on current configuration.
@property (nonatomic, readonly) BOOL allowOptIn;
/// Indicates whether or not the user is currently opted into two-factor authentication.
@property (nonatomic, readonly) BOOL isOptedIn;
@end


@interface UIAlertController (SWIFT_EXTENSION(PECore))
/// Adds a button with the provided title and handler to the alert.
/// \param title the title for the button
///
/// \param handler the handler to invoke when the button is tapped, or nil to simply dismiss the alert
///
- (void)addButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds an “OK” button with the provided listener to the alert.
/// \param handler the handler to invoke when the button is tapped, or nil to simply dismiss the alert
///
- (void)addOKButtonWithHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds a “positive” button with the provided title and handler to the alert. A “positive” button should typically be paired with a “negative” button when presenting the user with a choice.
/// \param title the title for the positive button
///
/// \param handler the handler to invoke when the positive button is tapped, or nil to simply dismiss the alert
///
- (void)addPositiveButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds a “negative” button with the provided title and handler to the alert. A “negative” button should typically be paired with a “positive” button when presenting the user with a choice.
/// \param title the title for the negative button
///
/// \param handler the handler to invoke when the negative button is tapped, or nil to simply dismiss the alert
///
- (void)addNegativeButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
@end


@interface UIColor (SWIFT_EXTENSION(PECore))
/// Standard color for secondary text and subtitles. Matches WPColor-TextSubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull subtleTextColor;)
+ (UIColor * _Nonnull)subtleTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text that is slightly less important than the primary text. Matches WPColor-TextSlightlySubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull slightlySubtleTextColor;)
+ (UIColor * _Nonnull)slightlySubtleTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text indicating an error or other urgent information. Matches WPColor-TextError.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull errorTextColor;)
+ (UIColor * _Nonnull)errorTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for disabled buttons and other controls. Matches WPColor-ActionButtonDisabledBack.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabledButtonColor;)
+ (UIColor * _Nonnull)disabledButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for badges.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull badgeColor;)
+ (UIColor * _Nonnull)badgeColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text used to indicate amounts of money. Matches WPColor-TextMoney.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull moneyTextColor;)
+ (UIColor * _Nonnull)moneyTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for dividers, which separate rows in a list or otherwise divide a view.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerColor;)
+ (UIColor * _Nonnull)dividerColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for banner borders. Matches WPColor-BorderVerySubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull bannerBorderColor;)
+ (UIColor * _Nonnull)bannerBorderColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for tab bar items that are not selected. Matches WPColor-TextSubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tabBarItemColor;)
+ (UIColor * _Nonnull)tabBarItemColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for tab bars.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nullable tabBarColor;)
+ (UIColor * _Nullable)tabBarColor SWIFT_WARN_UNUSED_RESULT;
@end




@interface UIImage (SWIFT_EXTENSION(PECore))
/// Create a UIImage from the customer’s bundle if it exists, falling back on the default if not
/// \param brandedName the name for the resource in the customer or Epic’s bundle
///
/// \param defaultBundle the bundle to use if not found in the customer’s; defaults to main application bundle
///
+ (UIImage * _Nullable)brandedImageNamed:(NSString * _Nonnull)brandedName defaultBundle:(NSBundle * _Nonnull)defaultBundle SWIFT_WARN_UNUSED_RESULT;
/// Create a UIImage from the customer’s bundle if it exists, falling back on the default if not
/// \param brandedName the name for the resource in the customer or Epic’s bundle
///
/// \param defaultBundle the bundle to use if not found in the customer’s; defaults to main application bundle
///
- (nullable instancetype)initWithBrandedName:(NSString * _Nonnull)brandedName defaultBundle:(NSBundle * _Nonnull)defaultBundle;
@end


@interface UIView (SWIFT_EXTENSION(PECore))
@property (nonatomic, copy) IBInspectable NSString * _Nullable tutorialViewID;
/// Adds a subview and applies constraints such that the subview fills the entire view.
/// \param view the subview to add
///
- (void)addAndFillWithSubview:(UIView * _Nonnull)view;
@end


@interface UIViewController (SWIFT_EXTENSION(PECore))
/// Hide the navigation bar. This function is overridden in the homepage so that library customers can have control over whether Epic controls this behavior, or they do
/// \param shouldShow should it show or hide
///
- (void)showNavigationBar:(BOOL)shouldShow;
/// Dismiss this view controller all the way to the login screen
/// \param loginViewController the view controller that is the login view controller
///
- (void)dismissToLoginController:(UIViewController * _Nonnull)loginViewController;
/// Gets the login view controller among the various ways a library custom may have presented the homepage post-login
- (UIViewController * _Nullable)getLoginViewController SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSHTTPURLResponse;

/// This class acts as the delegate for the underlying URLsession.
/// It helps to configure and create the session with the correct <em>URLSessionConfiguration</em>,
/// delegate and queue on which the completion blcoks will be called.
/// The shared/singleton manager is also the delegate for the session and must
/// implement any methods of interest from *URLSessionDelegate, URLSessionTaskDelegate,
/// URLSessionDataDelegate, URLSessionDownloadDelegate etc.
SWIFT_CLASS("_TtC6PECore17URLSessionManager")
@interface URLSessionManager : NSObject <NSURLSessionTaskDelegate>
/// Private Initializer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This <em>URLSessionTaskDelegaste</em> method checks if the statusCode matches HTTP_MOVED_TEMP/PERM
/// status codes and only allows redirection if the original request was not to an https URL.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
@end

enum UnreadIndicatorStyle : NSInteger;

/// View for displaying unread indicators, which provide a visual indication of whether or not an item has been read by the user.
SWIFT_CLASS("_TtC6PECore19UnreadIndicatorView")
@interface UnreadIndicatorView : UIView
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// IB initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets the style for this indicator.
/// \param style the style for the indicator
///
- (void)setStyle:(enum UnreadIndicatorStyle)style;
/// Sets whether or not this indicator is indicating an unread status.
/// \param isUnread set to true to indicate an unread status, false to indicate an read status
///
- (void)setUnread:(BOOL)isUnread;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, UnreadIndicatorStyle, open) {
  UnreadIndicatorStyleUnknown = 0,
  UnreadIndicatorStyleBillingStatement = 1,
  UnreadIndicatorStyleLabResult = 2,
  UnreadIndicatorStyleImagingResult = 3,
  UnreadIndicatorStyleOtherResult = 4,
  UnreadIndicatorStyleProcedureResult = 5,
  UnreadIndicatorStyleVisitAVS = 6,
  UnreadIndicatorStyleVisitNote = 7,
};

/// Types of servers that the web service framework can connect to
typedef SWIFT_ENUM(NSInteger, UrlType, open) {
/// An Epic Interconnect instance
  UrlTypeInterconnect = 0,
/// An Epic Web Blob Server
  UrlTypeWebBlob = 1,
/// A custom server
  UrlTypeNone = 2,
/// An OAuth2 authorization server
  UrlTypeOAuth2 = 3,
/// An instance of the mychart website
  UrlTypeMyChartWebsite = 4,
};


/// <ul>
///   <li>
///     Provides the appropriate user agent string for the application calling a web service
///   </li>
/// </ul>
SWIFT_CLASS("_TtC6PECore17UserAgentProvider")
@interface UserAgentProvider : NSObject
/// <ul>
///   <li>
///     <ul>
///       <li>
///         returns: the single instance of the <em>UserAgentProvider</em>
///       </li>
///     </ul>
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UserAgentProvider * _Null_unspecified instance;)
+ (UserAgentProvider * _Null_unspecified)instance SWIFT_WARN_UNUSED_RESULT;
+ (void)setInstance:(UserAgentProvider * _Null_unspecified)value;
- (void)setUserAgentPrefixWithPrefix:(NSString * _Nonnull)prefix;
/// Sets a new user agent version, overwriting the default value.
/// \param appVersion The version number of the application to report in the user agent
///
- (void)setUserAgentAppVersionWithAppVersion:(NSString * _Nonnull)appVersion;
+ (NSString * _Nonnull)getLibraryVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6PECore12ValidateUtil")
@interface ValidateUtil : NSObject
/// Check if an email address is valid or not. The email address now supports some non-English alphabet characters,
/// including ASCII 192-255 and Char 131, 138, 140, 142, 154, 156, 158, and 159 (ƒŠŒŽšœžŸ).
/// <p/>
/// This logic is consistent with PatientEngagement\Source\Shared\Web\Validation\ValidationHelpers.cs
/// although it's more complicated in server isValidEmailAddress^%ZeSMTP
/// @param email the email address to check
/// @return true if the email address is valid, false otherwise
+ (BOOL)isValidEmail:(NSString * _Nullable)email SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Card view for patient-facing “how to” videos
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore13VideoCardView")
@interface VideoCardView : SelfLoadingView
@end


SWIFT_CLASS("_TtC6PECore22VideoResponseViewModel")
@interface VideoResponseViewModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Defines the properties of a category of web services corresponding to a bundle of endpoints
/// contained under a common path on a server
SWIFT_CLASS("_TtC6PECore18WebServiceCategory")
@interface WebServiceCategory : NSObject
/// The namespace, or sub directory that this category of service is located under
@property (nonatomic, copy, getter=namespace, setter=setNamespace:) NSString * _Nullable namespace_;
/// The format of the request parameters
@property (nonatomic) enum PERequestFormat requestFormat;
/// The format of the expected response body
@property (nonatomic) enum PEResponseFormat responseFormat;
/// The authentication token type to use with this service category
@property (nonatomic) enum TokenType tokenType;
/// The destination server URL type to use with this service category
@property (nonatomic) enum UrlType urlType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore26WebSessionCallbackProtocol_")
@protocol WebSessionCallbackProtocol
- (void)onWebSessionReady;
@end


SWIFT_CLASS("_TtC6PECore17WebSessionManager")
@interface WebSessionManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Call this when the user logs in to set up the Web Session
+ (void)onUserLogInSetUpSession:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext;
/// Call this when the user logs out to clean up the WebSession
+ (void)onUserLogoutCleanUpSession;
/// Call this when the Session Context Changes
+ (void)onPatientContextChanged:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext;
/// Call to get if a web session is set up
/// @return true if a session is set up
+ (BOOL)hasSessionSetUp SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canUseDirectUrl:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// User context for the session
/// @return the user context for the session.
+ (PEUserContext * _Nullable)getSessionUserContext SWIFT_WARN_UNUSED_RESULT;
/// Patient context for the session
/// @return the patient context for the session.
+ (PEPatientContext * _Nullable)getSessionPatientContext SWIFT_WARN_UNUSED_RESULT;
/// Call to get if has jump token lock
/// @return the patient context for the session.
+ (BOOL)hasJumpTokenLock SWIFT_WARN_UNUSED_RESULT;
/// Method to check if an MO view can launch
/// @param listener
+ (void)prepareForWebViewLaunch:(id <WebSessionCallbackProtocol> _Nonnull)listener;
+ (void)addWebSessionQueueCompleteListener:(id <WebSessionCallbackProtocol> _Nonnull)listener keepHardReference:(BOOL)keepHardReference;
/// Add a queue completion listener which will call back when the web session queue is empty
/// @param listener - listener called after the queue is empty (or has timed out)
/// @param keepHardReference - Whether the queue should keep a weak or strong reference to the listener
/// @param shouldTimeOut - If we should callback to the listener if the queue has timed out (run into issues
/// processing the next queued event).
+ (void)addWebSessionQueueCompleteListener:(id <WebSessionCallbackProtocol> _Nonnull)listener keepHardReference:(BOOL)keepHardReference shouldTimeOut:(BOOL)shouldTimeOut;
/// Call this before you call WebPageService.getLoginToken.  Else the WebSessionManager could
/// get a jumptoken which may override the jump destination in cache.  Web is stateful :(
+ (void)startJumpTokenLaunchLock;
/// Call this after an MO view is done locking the session.
+ (void)endJumpTokenLaunchLock;
/// Call this after an MO view is done locking and a web session is set up.
/// This allows SSO customers to be supported if their redirects are different.
+ (void)maintainCurrentSessionSetup:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext;
/// Call this when an MO view is started, but hasn’t started to load yet
/// @param context
/// @param patientIndex
+ (void)onPrepareForWebSessionUse:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext;
+ (BOOL)isDirectUrlSupported:(PEOrganizationContext * _Nonnull)organizationContext SWIFT_WARN_UNUSED_RESULT;
/// Call this when app started logout workflow
+ (void)onClientLogoutStarted;
@end


SWIFT_CLASS("_TtC6PECore20WebViewConfigManager")
@interface WebViewConfigManager : NSObject
+ (WKWebViewConfiguration * _Nonnull)getSharedConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedConfiguration:(WKWebViewConfiguration * _Nullable)newConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
