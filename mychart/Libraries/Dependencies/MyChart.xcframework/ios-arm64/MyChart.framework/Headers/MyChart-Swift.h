// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef MYCHART_SWIFT_H
#define MYCHART_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import MyChartGlobals;
@import ObjectiveC;
@import PECore;
@import UIKit;
@import WatchConnectivity;
@import WebKit;
#endif

#import <MyChart/MyChart.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MyChart",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@interface NSBundle (SWIFT_EXTENSION(MyChart))
/// Return the correct mychart app bundle (framework or main, depending on context)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull myChart;)
+ (NSBundle * _Nonnull)myChart SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart13CommunityUtil")
@interface CommunityUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_WPRID;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_WPRID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_DEEPLINKURL;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_DEEPLINKURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_ORGID;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_ORGID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEATURE_NO_SPECIFY;)
+ (NSString * _Nonnull)FEATURE_NO_SPECIFY SWIFT_WARN_UNUSED_RESULT;
/// Set deeplink url corresponding to the dxoId which indicate the background update is still going for this organization
/// \param isUpdating true if the organization is still updating
///
/// \param externalOrgId id of the organization we want to check
///
/// \param deepLinkURL url for deep link jump
///
+ (void)setUpdatingStatusWithIsUpdating:(BOOL)isUpdating externalOrgId:(NSString * _Nonnull)externalOrgId deepLinkURL:(NSString * _Nonnull)deepLinkURL;
/// Get the preferences key for tracking if patient has external information is updating.
///
/// returns:
/// the key string for updating preference
+ (NSString * _Nonnull)getCommunityUpdatingPrefsKey SWIFT_WARN_UNUSED_RESULT;
/// get the list of orgs is updating
///
/// returns:
/// the list of org ids
+ (NSArray<NSString *> * _Nonnull)getListOfUpdatingOrgs SWIFT_WARN_UNUSED_RESULT;
/// The Notification when the update complete
/// \param successOrgNames names of the external organizations updated successfully
///
/// \param errorOrgNames names of the external organizations failed updating
///
+ (void)fireUpdateCompleteNotificationWithSuccessOrgNames:(NSString * _Nonnull)successOrgNames errorOrgNames:(NSString * _Nonnull)errorOrgNames focusWPR:(NSString * _Nonnull)focusWPR deepLinkURL:(NSString * _Nonnull)deepLinkURL;
/// The toast when the udpate complete
/// \param successOrgNames names of the external organizations updated successfully
///
/// \param errorOrgNames names of the external organizations failed updating
///
+ (void)fireUpdateCompleteToastWithSuccessOrgNames:(NSString * _Nonnull)successOrgNames errorOrgNames:(NSString * _Nonnull)errorOrgNames;
+ (NSString * _Nonnull)constructAsynLoadingDeepLinkURLWithUpdateContext:(NSString * _Nonnull)updateContext wprId:(NSString * _Nonnull)wprId orgId:(NSString * _Nonnull)orgId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationResponsefoKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationStatusKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationRefreshBannerUpdateKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getUpdateContextURLWithContext:(enum CommunityUpdateContext)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for web requests related to H2G
SWIFT_CLASS("_TtC7MyChart22CommunityWebServiceAPI")
@interface CommunityWebServiceAPI : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// Returns the community webservice for the app
+ (CommunityWebServiceAPI * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Three states of web service:
/// 1 - the web service is running
/// 0 - the web service is paused for the new request
/// -1 - the web service is terminated
- (void)setIsCommunityUpdateStatusRunningWithIsRunning:(NSInteger)isRunning;
- (void)setFeatureIsCurrentlyCheckingStatusWithFeatureBit:(NSString * _Nonnull)featureBit;
- (void)beginBackgroundUpdateTask;
- (void)endBackgroundUpdateTask;
/// send the request to check updating status
+ (void)launchCommunityLoadingStatusRequest;
- (void)getCommunityUpdateStatusAPI;
@end

@class WPCustomerServiceSettingsResponse;
@class PEError;

/// protocol for callback contexts
SWIFT_PROTOCOL("_TtP7MyChart23CustomerServiceCallback_")
@protocol CustomerServiceCallback
- (void)onSuccessWithResponse:(WPCustomerServiceSettingsResponse * _Nullable)response;
- (void)onFailureWithError:(PEError * _Nullable)error;
@end

@class EFDataSet;

SWIFT_CLASS("_TtC7MyChart14EFDataSetUtils")
@interface EFDataSetUtils : NSObject
/// Takes the given data set and creates a new data set where each data point represents the sum
/// of all data from the original data set over the course of one time period. For example if
/// the input data has a reading of 5 at 12:20pm and 7 at 12:40pm, the output data set accumulated
/// by hour would have one reading at 12:00pm of 12.
/// Assumes data is in chronilogial order
+ (EFDataSet * _Nullable)accumulatedGraphDataWithDataSet:(EFDataSet * _Nullable)dataSet period:(WPAccumulationPeriod)period SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class NSCoder;

SWIFT_CLASS("_TtC7MyChart15EFGraphDataView")
@interface EFGraphDataView : UIView
@property (nonatomic) BOOL showMetadata;
@property (nonatomic, strong) UIColor * _Nullable dataColor;
@property (nonatomic, strong) UIColor * _Nullable abnormalDataColor;
@property (nonatomic, strong) UIColor * _Nullable shadingColor;
@property (nonatomic, strong) UIColor * _Nullable labelColor;
@property (nonatomic) BOOL showBasal;
@property (nonatomic) BOOL showBolus;
@property (nonatomic, readonly) CGRect rectOfGraph;
@property (nonatomic, readonly) EFGraphType graphType;
@property (nonatomic, readonly, strong) EFDataSet * _Nullable dataSet;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Creates a grapher for the current graph type which draws the Y axis and data
- (void)drawRect:(CGRect)rect;
/// If the bounds changed, recalculate coordinates
@property (nonatomic) CGRect bounds;
/// Calculates coordinates for data in the current frame. Coordinates are stored on each
/// data point object
- (void)calculateCoordinatesForData;
/// Sets up the data view for the given data set and graph type
/// \param dataSet the data set to show
///
/// \param graphType the graph type to show
///
- (void)setWithDataSet:(EFDataSet * _Nullable)dataSet graphType:(EFGraphType)graphType;
@end


/// Class to be used as an optional X axis for the EFGrapher
SWIFT_CLASS("_TtC7MyChart21EFGraphHorizontalAxis")
@interface EFGraphHorizontalAxis : UIView
@property (nonatomic) EFGraphType graphType;
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Set up the axis with the given date range
/// \param start leading-edge date
///
/// \param end trailing-edge date
///
- (void)setRangeFrom:(NSDate * _Nonnull)start to:(NSDate * _Nonnull)end;
/// If the axis represents one day, draw ticks and hour markings for that day
- (void)drawRect:(CGRect)rect;
@end

@protocol GraphMetadataSwitchDelegate;

SWIFT_CLASS("_TtC7MyChart13EFGraphLegend")
@interface EFGraphLegend : UIView
@property (nonatomic, strong) id <GraphMetadataSwitchDelegate> _Nullable metadataDelegate;
/// required to be set for insulin
@property (nonatomic, strong) UIColor * _Nullable abnormalDataColor;
@property (nonatomic, strong) UIColor * _Nullable dataColor;
@property (nonatomic, strong) UIColor * _Nullable labelColor;
@property (nonatomic) WPFlowsheetRowMetadataType metadataType;
@property (nonatomic, getter=isHidden) BOOL hidden;
- (void)awakeFromNib;
/// Sets on/off values for left and right switches
- (void)setMetadataSwitchWithLeftOn:(BOOL)leftOn rightOn:(BOOL)rightOn;
- (void)drawRect:(CGRect)rect;
/// Draws a shape for a graph indicating a data point is an after meal glucose reading.
/// The shape is a triangle with an outline of the given color filled with white
/// \param point the center point for the shape
///
/// \param context the CGContext in which to draw the shape
///
/// \param color color for the outer part of the shape. should be normal or abnormal data color
///
+ (void)drawBeforeMealShapeCenteredAtPoint:(CGPoint)point context:(CGContextRef _Nullable)context color:(CGColorRef _Nonnull)color;
/// Draws a shape for a graph indicating a data point is an after meal glucose reading.
/// The shape is a triangle with an outline of abnormal or normal data color filled with white
/// \param point the center point for the shape
///
/// \param context the CGContext in which to draw the shape
///
/// \param color color for the outer part of the shape. should be normal or abnormal data color
///
+ (void)drawAfterMealShapeCenteredAtPoint:(CGPoint)point context:(CGContextRef _Nullable)context color:(CGColorRef _Nonnull)color;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart20EFHourlyTrendGrapher")
@interface EFHourlyTrendGrapher : EFGrapher
/// Draws the normal range rectangle, trend bars, and Y axis labels
/// \param frame where to draw the data. should be the same frame called when coordinates were calculated
///
- (void)graphDataSetWithinFrame:(CGRect)frame;
- (null_unspecified instancetype)initWithDataSet:(EFDataSet * _Null_unspecified)dataSet SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EFDataPoint;

SWIFT_CLASS("_TtC7MyChart16EFInsulinDataSet")
@interface EFInsulinDataSet : EFDataSet
@property (nonatomic, strong) EFDataSet * _Nullable basalAccumulatedDataSet;
@property (nonatomic, strong) EFDataSet * _Nullable bolusAccumulatedDataSet;
/// supports hour, day, month based on explicit instant high/low
@property (nonatomic, readonly) WPAccumulationPeriod accumulationPeriod;
/// Creates an insulin data set with the given basal and bolus data sets
/// \param basalDataSet basal data
///
/// \param bolusDataSet bolus data
///
- (nullable instancetype)initWithBasalDataSet:(EFDataSet * _Nullable)basalDataSet bolusDataSet:(EFDataSet * _Nullable)bolusDataSet OBJC_DESIGNATED_INITIALIZER;
/// Sets instants to limit what period of time the data set should effectively represent.
/// Recalculates accumulated data based on the set time period
- (void)setExplicitInstantLow:(NSDate * _Null_unspecified)instantLow explicitInstantHigh:(NSDate * _Null_unspecified)instantHigh;
/// Gets the latest i.e. most recent data point. If there is bolus and basal
/// data at the latest instant, returns the bolus point. Ignores explicit
/// instant high/low
- (EFDataPoint * _Nullable)getLatestDataPoint SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithData:(NSArray * _Null_unspecified)data decimals:(int32_t)decimals SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WPPushNotification;

SWIFT_PROTOCOL("_TtP7MyChart38IDidGetPushNotificationDetailsDelegate_")
@protocol IDidGetPushNotificationDetailsDelegate
- (void)didCompleteWithPushNotification:(WPPushNotification * _Nullable)pushNotification;
@end


/// Delegate used to notify a listener when an epichttp or epicmychart deep link is tapped, which could be contained in message details, in a push notification payload or a link from a third party app.
SWIFT_PROTOCOL("_TtP7MyChart25IWPDeepLinkActionDelegate_")
@protocol IWPDeepLinkActionDelegate <PEDeepLinkActionDelegate>
@end


/// This class stores metadata about the currently paired watch, if it is also linked to the org
SWIFT_CLASS("_TtC7MyChart18LinkedWatchDetails")
@interface LinkedWatchDetails : NSObject
/// Device id
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// Org Id
@property (nonatomic, copy) NSString * _Nonnull orgId;
/// Org name
@property (nonatomic, copy) NSString * _Nonnull orgName;
/// The WPR who linked the watch
@property (nonatomic, copy) NSString * _Nonnull wprId;
/// The display name for the user who linked the watch
@property (nonatomic, copy) NSString * _Nonnull userNickname;
/// Is the paired watch linked to the current org
@property (nonatomic, readonly) BOOL isLinkedToCurrentOrg;
/// Is the watch paired to this org and to this user?
@property (nonatomic, readonly) BOOL isLinkedToCurrentUser;
/// Removes the seralized data saved using writeToWatchStorage
///
/// returns:
/// successful delete
- (BOOL)unlinkFromOrg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSMutableArray<ObjectType> (SWIFT_EXTENSION(MyChart))
+ (NSMutableArray * _Nonnull)removeDuplicatesFromArray:(NSMutableArray * _Nonnull)original isDuplicate:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(id _Nonnull, id _Nonnull))isDuplicate SWIFT_WARN_UNUSED_RESULT;
@end



@class WPScreeningsServiceResponse;

/// Protocol for listeners to results of screenings web service call
SWIFT_PROTOCOL("_TtP7MyChart18ScreeningsCallback_")
@protocol ScreeningsCallback
- (void)onSuccessWithResponse:(WPScreeningsServiceResponse * _Nullable)response;
- (void)onFailureWithError:(PEError * _Nullable)error;
@end


/// The session manager is shared between the watch and phone targets to manage passing data between the two platforms and overall authentication workflows. It therefore also serves as the WCSessionDelegate.
SWIFT_CLASS("_TtC7MyChart14SessionManager")
@interface SessionManager : NSObject
/// Details for the currently linked watch
@property (nonatomic, readonly, strong) LinkedWatchDetails * _Nullable currentLinkedWatch;
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SessionManager * _Nonnull instance;)
+ (SessionManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// init to be used by singleton only
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SessionManager (SWIFT_EXTENSION(MyChart))
/// Invalidate the watch feed. Called when the feedInvalidatedNotification is posted on the paired phone
- (void)invalidateWatchFeed;
/// The watch can request that the phone remove its local cached data with the watch details
- (void)receiveUnlinkCurrentWatch:(NSDictionary<NSString *, id> * _Nonnull)params :(id _Null_unspecified)replyHandler;
@end

@class WCSession;

@interface SessionManager (SWIFT_EXTENSION(MyChart)) <WCSessionDelegate>
- (void)sessionDidBecomeInactive:(WCSession * _Nonnull)session;
- (void)sessionDidDeactivate:(WCSession * _Nonnull)session;
- (void)session:(WCSession * _Nonnull)session activationDidCompleteWithState:(WCSessionActivationState)activationState error:(NSError * _Nullable)error;
- (void)session:(WCSession * _Nonnull)session didReceiveApplicationContext:(NSDictionary<NSString *, id> * _Nonnull)applicationContext;
- (void)sessionReachabilityDidChange:(WCSession * _Nonnull)session;
/// custom function to parse our own message formats. Requires the message contain a function that is executable by reflection. This could be used by either platform, but currently we only send messages from phone to watch.
- (void)session:(WCSession * _Nonnull)session didReceiveMessage:(NSDictionary<NSString *, id> * _Nonnull)message replyHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))replyHandler;
@end




@interface UILabel (SWIFT_EXTENSION(MyChart))
- (void)setTextOrHide:(NSString * _Nullable)text;
@end







@interface WCSession (SWIFT_EXTENSION(MyChart))
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

@protocol IWPPerson;
@class UIViewController;
@protocol IWPAppointment;

/// API class for generating activity deep links
SWIFT_CLASS("_TtC7MyChart13WPAPIActivity")
@interface WPAPIActivity : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accountSettings;)
+ (NSString * _Nonnull)accountSettings SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appointmentArrivalSetup;)
+ (NSString * _Nonnull)appointmentArrivalSetup SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appointmentList;)
+ (NSString * _Nonnull)appointmentList SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull askAQuestion;)
+ (NSString * _Nonnull)askAQuestion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull billingSummary;)
+ (NSString * _Nonnull)billingSummary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull careTeam;)
+ (NSString * _Nonnull)careTeam SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changePassword;)
+ (NSString * _Nonnull)changePassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeShortcuts;)
+ (NSString * _Nonnull)changeShortcuts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull claims;)
+ (NSString * _Nonnull)claims SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull coverages;)
+ (NSString * _Nonnull)coverages SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull covidStatus;)
+ (NSString * _Nonnull)covidStatus SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull customerService;)
+ (NSString * _Nonnull)customerService SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull documentHub;)
+ (NSString * _Nonnull)documentHub SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull education;)
+ (NSString * _Nonnull)education SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull evisit;)
+ (NSString * _Nonnull)evisit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull familyAccess;)
+ (NSString * _Nonnull)familyAccess SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull healthMaintenance;)
+ (NSString * _Nonnull)healthMaintenance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull healthSummary;)
+ (NSString * _Nonnull)healthSummary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull letters;)
+ (NSString * _Nonnull)letters SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull linkMyAccounts;)
+ (NSString * _Nonnull)linkMyAccounts SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medicalAdvice;)
+ (NSString * _Nonnull)medicalAdvice SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull medications;)
+ (NSString * _Nonnull)medications SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messages;)
+ (NSString * _Nonnull)messages SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull myChartNowHome;)
+ (NSString * _Nonnull)myChartNowHome SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull myDocuments;)
+ (NSString * _Nonnull)myDocuments SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull onDemandVideoVisit;)
+ (NSString * _Nonnull)onDemandVideoVisit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull onMyWay;)
+ (NSString * _Nonnull)onMyWay SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull paperlessBilling;)
+ (NSString * _Nonnull)paperlessBilling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull patientEstimates;)
+ (NSString * _Nonnull)patientEstimates SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull personalInformation;)
+ (NSString * _Nonnull)personalInformation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull personalize;)
+ (NSString * _Nonnull)personalize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull premiumBilling;)
+ (NSString * _Nonnull)premiumBilling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull preventiveCare;)
+ (NSString * _Nonnull)preventiveCare SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull questionnaires;)
+ (NSString * _Nonnull)questionnaires SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scheduling;)
+ (NSString * _Nonnull)scheduling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull shareEverywhere;)
+ (NSString * _Nonnull)shareEverywhere SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sharingHub;)
+ (NSString * _Nonnull)sharingHub SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull symptomChecker;)
+ (NSString * _Nonnull)symptomChecker SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tapestryCoverage;)
+ (NSString * _Nonnull)tapestryCoverage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull testResults;)
+ (NSString * _Nonnull)testResults SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull toDo;)
+ (NSString * _Nonnull)toDo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull toDoChanges;)
+ (NSString * _Nonnull)toDoChanges SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull toDoOverdue;)
+ (NSString * _Nonnull)toDoOverdue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull trackMyHealth;)
+ (NSString * _Nonnull)trackMyHealth SWIFT_WARN_UNUSED_RESULT;
/// Checks security for the activity corresponding to the given deep link
/// \param deepLink the deep link for the activity to be checked. This can be a manually constructed deep link starting with a valid prefix (epichttp:// or the app’s launch scheme), or one of the WPAPIActivity constants.
///
/// \param person the person whose access is being checked
///
///
/// returns:
/// WPAPIAccessResult that describes the person’s access to the activity corresponding to the deep link
+ (enum WPAPIAccessResult)accessResultForActivityWithDeepLink:(NSString * _Nonnull)deepLink forPerson:(id <IWPPerson> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Returns the view controller for the activity that corresponds to the provided deep link. Within the activity, the information displayed and the features available will be dependent on the current person and the user’s security.
/// warning:
/// In order to use this API for pinch-to-zoom activities (May 20+), the setting LoadHomepageMenus must be set to true in the SettingsForLibraryBuilds property list.
/// \param deepLink the epichttp deep link for the activity to be opened. This can be a manually constructed deep link, or one of the WPAPIActivity constants.
///
///
/// returns:
/// A view controller for the corresponding activity that should be immediately displayed. Returns nil if the WPAPIDeepLinkActionDelegate handled the deep link or if there was an issue launching the activity (i.e. current person doesn’t have access to the activity, the deep link couldn’t be parsed)
+ (UIViewController * _Nullable)getViewControllerForActivityWithDeepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
/// Checks if the activity corresponding to the given deep link should be presented modally, or pushed onto the navigation stack. This API can also be used to determine if the MO version of certain activities (e.g. Billing, Medications, Messages) is available: true indicates the MO version is available, and false indicates that the native version of the acivity will be used instead.
/// \param deepLink the deep link for the activity to be checked. This can be a manually constructed deep link, or one of the WPAPIActivity constants.
///
///
/// returns:
/// true if the activity’s view controller should be presented modally, false if it should be pushed onto the navigation stack
+ (BOOL)shouldPresentViewControllerModallyForActivityWithDeepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to eCheck-in for a specific CSN, which can be encrypted or unencrypted
/// \param csn csn the unique contact serial number of the appointment to open eCheck-in for
///
/// \param isCsnEncrypted isCsnEncrypted whether the passed in CSN is encrypted
///
+ (NSString * _Nonnull)eCheckInWithCSN:(NSString * _Nonnull)csn isCsnEncrypted:(BOOL)isCsnEncrypted SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to future appointment details for a specific CSN
/// \param csn csn the unique contact serial number of the future appointment
///
+ (NSString * _Nonnull)futureAppointmentDetailsWithCSN:(NSString * _Nonnull)csn SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to appointment AVS for a specific DAT
/// \param dat dat the unique Identifier of the appointment to open AVS for
///
+ (NSString * _Nonnull)appointmentAVSWithDAT:(NSString * _Nonnull)dat SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to message details for a specific message Id
/// \param messageId messageId The Id (CSN) for the message whos details need to be viewed.
///
+ (NSString * _Nonnull)messageDetailsWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to the compose message form with an attached Apple Health ECG
/// \param deepLinkInfo deepLinkInfo A dictionary containing information about a deep link that this message is being launched from. If a file URL (i.e. file:///… ) is passed in via the “filepath” key, the corresponding file will be loaded - if possible - and attached to the message. This dictionary can be obtained via getEpicMyChartDeepLinkInfo in WPAPIdeepLinkManager. Right now this only supports attaching Apple Health ECG PDFs.
///
+ (NSString * _Nonnull)ecgMessageWithDeepLinkInfo:(NSDictionary<NSString *, NSString *> * _Nonnull)deepLinkInfo SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to test result details for a specific order Id
/// \param orderId orderId the Id (order Id) for a test result to display the details for
///
+ (NSString * _Nonnull)testResultDetailsWithOrderId:(NSString * _Nonnull)orderId SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to the Appointment Arrival (“Hello Patient”) check-in workflow for a specific appointment
/// \param appointment the appointment to trigger arrival for 
///
+ (NSString * _Nonnull)appointmentArrivalCheckInWithAppointment:(id <IWPAppointment> _Nonnull)appointment SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to the Appointment Arrival (“Hello Patient”) check-in workflow for a specific appointment
/// \param csn the unique contact serial number of the appointment to trigger arrival for 
///
/// \param person the person being arrived 
///
/// \param appointmentTime the start time of the appointment 
///
/// \param selfArrivalMechanism the self-arrival method used to initiate the arrival workflow for this appointment 
///
+ (NSString * _Nonnull)appointmentArrivalCheckInWithCSN:(NSString * _Nonnull)csn person:(id <IWPPerson> _Nonnull)person appointmentTime:(NSDate * _Nonnull)appointmentTime selfArrivalMechanism:(enum WPAPIAppointmentSelfArrivalMechanism)selfArrivalMechanism SWIFT_WARN_UNUSED_RESULT;
/// Generates a deep link corresponding to scheduling for a specific ticket Id
/// \param ticketId the encrypted ID of the ticket the scheduling is for
///
+ (NSString * _Nonnull)appointmentTicketSchedulingWithTicketId:(NSString * _Nonnull)ticketId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UISwitch;

@interface WPAccountSettingsViewController (SWIFT_EXTENSION(MyChart))
/// true if not self submitted and there’s a paired watch.  If the org doesn’t the apple watch feature, we indicate that within the subtext of the row
@property (nonatomic, readonly) BOOL shouldShowAppleWatchRow;
/// Is this watch feature available
@property (nonatomic, readonly) BOOL isAppleWatchFeatureAvailable;
/// Apple watch feature switch toggled
- (void)didToggleAppleWatchSwitch:(UISwitch * _Nonnull)watchSwitch;
/// Prepare and present the linking view controller
- (void)setupAppleWatchLink:(UISwitch * _Nonnull)watchSwitch;
@end


SWIFT_CLASS("_TtC7MyChart33WPAddOrganizationHeaderFooterView")
@interface WPAddOrganizationHeaderFooterView : UITableViewHeaderFooterView
- (void)awakeFromNib;
- (void)layoutSubviews;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PEPatientContext;

/// API class with methods for sending the current website name to the server for affiliate branding
SWIFT_CLASS("_TtC7MyChart32WPAffiliateBrandingWebServiceAPI")
@interface WPAffiliateBrandingWebServiceAPI : NSObject
/// Objective-C wrapper for the web service to set the affiliate branding from the website name
/// \param patientContext the callback object
///
/// \param websiteName website name from the current phonebook entry
///
- (void)setAffiliateBrandingWebsiteInSessionWithPatientContext:(PEPatientContext * _Nonnull)patientContext websiteName:(NSString * _Nonnull)websiteName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PEUserContext;

/// A navigation controller for the workflow to setup Appointment Arrival. The setup workflow may include feature onboarding in addition to actually enabling appointment arrival (along with required OS permissions).
SWIFT_CLASS("_TtC7MyChart40WPAppointmentArrivalNavigationController")
@interface WPAppointmentArrivalNavigationController : UINavigationController
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters.
/// \param userContext the current user context
///
/// \param rootViewController the view controller to display within this navigation controller
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext rootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters. This is for the arrival workflow
/// \param userContext the current user context
///
/// \param csn the appointment csn
///
/// \param displayTime the appointment display time
///
/// \param index the patient index
///
/// \param initiatedWithBeacons Was this for a beacon
///
/// \param enableSnooze Should you enable snoozing
///
/// \param initiatedFromSnooze Was this created from a snooze
///
/// \param arrivedApptOrganizationID the appointment org id
///
/// \param firstUserID The user id for the appt
///
/// \param autoCheckIn Should the view auto check in
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext forCSN:(NSString * _Nonnull)csn appointmentTime:(NSDate * _Nonnull)displayTime andPatientIndex:(NSInteger)index andInitiatedWithBeacons:(BOOL)initiatedWithBeacons andEnableSnooze:(BOOL)enableSnooze andInitiatedFromSnooze:(BOOL)initiatedFromSnooze andInitiatedFromUser:(BOOL)userInitiated andOrgID:(NSString * _Nonnull)arrivedApptOrganizationID andFirstUserID:(NSString * _Nonnull)firstUserID OBJC_DESIGNATED_INITIALIZER;
/// UINavigationController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// UINavigationController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end

@class UIStoryboardSegue;

/// A view controller responsible for onboarding users to the Appointment Arrival feature.
SWIFT_CLASS("_TtC7MyChart44WPAppointmentArrivalOnboardingViewController")
@interface WPAppointmentArrivalOnboardingViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalOnboardingViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
+ (WPAppointmentArrivalOnboardingViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UIViewController
- (void)viewWillLayoutSubviews;
/// UIViewController
- (void)viewDidAppear:(BOOL)animated;
/// UIViewController
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A view controller responsible for prompting the user for all required permissions and actually enabling Appointment Arrival.
SWIFT_CLASS("_TtC7MyChart45WPAppointmentArrivalPermissionsViewController")
@interface WPAppointmentArrivalPermissionsViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalPermissionsViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
+ (WPAppointmentArrivalPermissionsViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UIViewController
- (void)viewWillAppear:(BOOL)animated;
/// UIViewController
- (void)viewDidAppear:(BOOL)animated;
/// UIViewController
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart33WPAppointmentAvsWebViewController")
@interface WPAppointmentAvsWebViewController : WPActivityWebViewController
- (void)viewDidLoad;
- (void)closePressed:(id _Null_unspecified)sender;
- (void)backPressed:(id _Null_unspecified)sender;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart28WPAppointmentsFeatureManager")
@interface WPAppointmentsFeatureManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL panelAppointments2019Available;)
+ (BOOL)panelAppointments2019Available SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAppointmentSummaryAvailable;)
+ (BOOL)pastAppointmentSummaryAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAdmissionSummaryAvailable;)
+ (BOOL)pastAdmissionSummaryAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAdmissionsAvailable;)
+ (BOOL)pastAdmissionsAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol WPAppointmentsListRowViewModel;

SWIFT_PROTOCOL("_TtP7MyChart21WPAppointmentsListRow_")
@protocol WPAppointmentsListRow
- (void)setWith:(id <WPAppointmentsListRowViewModel> _Nonnull)viewModel;
@end


SWIFT_PROTOCOL("_TtP7MyChart30WPAppointmentsListRowViewModel_")
@protocol WPAppointmentsListRowViewModel
@end

@class WPSpringboardInfo;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC7MyChart32WPAppointmentsListViewController")
@interface WPAppointmentsListViewController : WPTableViewController
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
+ (WPAppointmentsListViewController * _Nonnull)instantiate SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil contents:(NSMutableArray * _Nullable)contents SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <CommunityDataRefreshViewDelegate>
- (void)didTapRefreshBanner;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPPatientVisitGuideLoadedProtocol>
- (void)visitGuideLoadedWithData:(NSData * _Nullable)data;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPCancelAppointmentDelegate>
- (void)cancelAppointmentDidNotConfirm;
- (void)cancelAppointmentConfirmed:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
@end

@class UITableView;
@class UITableViewCell;

@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart))
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class WPGetDocumentResponse;

SWIFT_CLASS("_TtC7MyChart34WPAttachmentLauncherViewController")
@interface WPAttachmentLauncherViewController : WPViewController <WPShareDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the view controller with a dcs ID and an optional file extension for the attachment
/// \param dcsID dcs ID of the attachment being launched
///
/// \param dcsExtension optional file extension for the attachment
///
- (nonnull instancetype)initWithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
/// Callback method that is called after getting the attachment from the server
/// \param response The response object containing the attachment object
///
- (void)didGetDocumentWithResponse:(WPGetDocumentResponse * _Nonnull)response;
- (void)didShowShareDialog;
- (void)didCancelShareDialog;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WPAttachment;

SWIFT_CLASS("_TtC7MyChart32WPAttachmentUploadViewController")
@interface WPAttachmentUploadViewController : WPViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the view controller with a dcs ID and an optional file extension for the attachment
/// \param dcsID dcs ID of the attachment being launched
///
/// \param dcsExtension optional file extension for the attachment
///
- (nonnull instancetype)initWithAttachment:(WPAttachment * _Nonnull)attachment;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

enum BiometricResult : NSInteger;

SWIFT_CLASS("_TtC7MyChart24WPBiometricAuthenticator")
@interface WPBiometricAuthenticator : NSObject
/// Registers generic biometric keychain item. This application-level item will require the user to authenticate biometrics when they attempt to access it.
///
/// throws:
/// KeychainError if the key could not be added
+ (BOOL)registerGenericBiometricKeyAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Accesses the generic biometric keychain item
/// \param prompt A prompt to display to the user
///
///
/// throws:
/// KeychainError if the key could not be deleted
///
/// returns:
/// The value of the item
+ (NSString * _Nullable)readGenericBiometricKeyWithPrompt:(NSString * _Nonnull)prompt error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Delete generic biometric keychain item
///
/// throws:
/// KeychainError if the key could not be deleted
///
/// returns:
/// A BiometricResult indicating whether the user’s biometrics were authenticated
+ (BOOL)deleteGenericBiometricKeyAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Attempt to authenticate the user’s biometrics.
/// \param prompt the prompt to display to the user
///
///
/// returns:
/// A BiometricResult indicating whether the user’s biometrics were authenticated
+ (enum BiometricResult)authenticateBiometricsWithPrompt:(NSString * _Nonnull)prompt SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BiometricResult, open) {
  BiometricResultAuthenticated = 0,
  BiometricResultCanceled = 1,
  BiometricResultFailed = 2,
};


SWIFT_CLASS("_TtC7MyChart44WPCommunityUpdateMyAccountsWebViewController")
@interface WPCommunityUpdateMyAccountsWebViewController : WPCommunityManageMyAccountsWebViewController
- (nonnull instancetype)init;
- (void)viewDidLoad;
- (null_unspecified instancetype)init:(BOOL)showPopupWhenClose OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initForLinking OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// response class for getting H2G++ refresh data status
SWIFT_CLASS("_TtC7MyChart23WPCommunityUpdateStatus")
@interface WPCommunityUpdateStatus : NSObject
@property (nonatomic) NSInteger success;
@property (nonatomic, copy) NSString * _Nullable dxoId;
@property (nonatomic, copy) NSString * _Nullable orgName;
@property (nonatomic, copy) NSString * _Nullable focusWPR;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7MyChart15WPCookieHandler")
@interface WPCookieHandler : NSObject <WebSessionCallbackProtocol>
- (void)onWebSessionReady;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart31WPCovidStatusSpringboardManager")
@interface WPCovidStatusSpringboardManager : NSObject <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPCustomerServiceSettingsTopic;

/// response class for messaging web service that gets customer service settings
SWIFT_CLASS("_TtC7MyChart33WPCustomerServiceSettingsResponse")
@interface WPCustomerServiceSettingsResponse : NSObject
/// List of topics
@property (nonatomic, copy) NSArray<WPCustomerServiceSettingsTopic *> * _Null_unspecified topics;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// class to represent customer service topics in settings loaded from the database
SWIFT_CLASS("_TtC7MyChart30WPCustomerServiceSettingsTopic")
@interface WPCustomerServiceSettingsTopic : NSObject
/// topic ID
@property (nonatomic, copy) NSString * _Nullable ID;
/// topic title
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPOrganizationInfo;

/// API class with methods for web requests related to Customer Service
SWIFT_CLASS("_TtC7MyChart30WPCustomerServiceWebServiceAPI")
@interface WPCustomerServiceWebServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <CustomerServiceCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Objective-C wrapper for the web service to load customer service settings
/// \param patientContext the callback object
///
/// \param encMsgInfo server encrypted workflow-specific information to load the right topics
///
- (void)getSettingsWithPatientContext:(PEPatientContext * _Nonnull)patientContext encMsgInfo:(NSString * _Nonnull)encMsgInfo orgInfo:(WPOrganizationInfo * _Nonnull)orgInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7MyChart20WPDeepLinkDataHolder")
@interface WPDeepLinkDataHolder : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEY_ORGID;)
+ (NSString * _Nonnull)KEY_ORGID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEY_EXTERNAL_ORGID;)
+ (NSString * _Nonnull)KEY_EXTERNAL_ORGID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEY_WPRID;)
+ (NSString * _Nonnull)KEY_WPRID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEY_FEATURE;)
+ (NSString * _Nonnull)KEY_FEATURE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEY_URL;)
+ (NSString * _Nonnull)KEY_URL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEY_FILEPATH;)
+ (NSString * _Nonnull)KEY_FILEPATH SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull pushNotificationID;
/// UUID generated by Apple Watch during handoff
@property (nonatomic, copy) NSString * _Nonnull handoffId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Get the singleton of deep link data holder
///
/// returns:
/// the singleton of deep link data holder
+ (WPDeepLinkDataHolder * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getOrgID SWIFT_WARN_UNUSED_RESULT;
- (void)setOrgIDWithOrgID:(NSString * _Nonnull)orgID;
- (void)removeOrgID;
- (NSString * _Nullable)getWprID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDeepLinkURL SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getFilePath SWIFT_WARN_UNUSED_RESULT;
- (void)setDeepLinkURLWithURLString:(NSString * _Nonnull)URLString;
- (void)removeDeepLinkURL;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getDeepLinkInfo SWIFT_WARN_UNUSED_RESULT;
/// clear deep link info
- (void)clearDeepLinkInfo;
@end


SWIFT_CLASS("_TtC7MyChart28WPDeepLinkHomeViewController")
@interface WPDeepLinkHomeViewController : WPViewController
/// Get the springboard controller. It’ll return a deep link springboard controller if there is a valid epicmychart deep link.
///
/// returns:
/// the springboard controller
+ (UIViewController * _Nonnull)getSpringboardControllerWithBackgroundController:(UIViewController * _Nullable)backgroundController SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol PEPersonProtocol;
enum DeepLinkLaunchResult : NSInteger;
enum EpicMyChartDeepLinkStatus : NSInteger;

SWIFT_CLASS("_TtC7MyChart17WPDeepLinkManager")
@interface WPDeepLinkManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgID;)
+ (NSString * _Nonnull)EpicHttpH2GOrgID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgName;)
+ (NSString * _Nonnull)EpicHttpH2GOrgName SWIFT_WARN_UNUSED_RESULT;
/// Set delegate to perform an action for epichttp or epicmychart deep link when tapped, which could be contains in message details, a push notification payload or a link in a third party
/// \param actionDelegate delegate to perform an action
///
+ (void)setDeepLinkActionDelegate:(id <IWPDeepLinkActionDelegate> _Nonnull)actionDelegate;
/// Set delegate to perform an action for epichttp or epicmychart deep link when tapped, which could be contains in message details, a push notification payload or a link in a third party
/// \param actionDelegate delegate to perform an action
///
+ (id <IWPDeepLinkActionDelegate> _Nullable)getDeepLinkActionDelegate SWIFT_WARN_UNUSED_RESULT;
/// Remove delegate to perform an action for epichttp or epicmychart deep link when tapped, which could be contains in message details, a push notification payload or a link in a third party
+ (void)removeDeepLinkAction;
+ (BOOL)tryLaunchActivityForEpicHttpDeepLinkInNavigationController:(UINavigationController * _Nonnull)navigationController forPerson:(id <PEPersonProtocol> _Nullable)person orgId:(NSString * _Nullable)orgId forUrl:(NSString * _Nonnull)url;
/// Launches a Mychart activity for a given deep link. This could be called in response to a
/// deep link tap (such as those formatted as epichttp://) inside a mychart activity.
/// \param navigationController The navigation controller
///
/// \param url The url for which activity is to be launched
///
///
/// returns:
///
/// <ul>
///   <li>
///     DeepLinkLaunchResult indicating the result for the launch attempt
///   </li>
/// </ul>
+ (enum DeepLinkLaunchResult)launchActivityForEpicHttpDeepLinkInNavigationController:(UINavigationController * _Nonnull)navigationController forUrl:(NSString * _Nonnull)url;
/// Launches a Mychart activity for a given deep link. This could be called in response to a deep link tap such as those formatted as epichttp:// inside a mychart activity
/// \param navigationController The navigation controller
///
/// \param person The person representing the context to switch to
///
/// \param url The url for which activity is to be launched
///
///
/// returns:
///
/// <ul>
///   <li>
///     DeepLinkLaunchResult indicating the result for the launch attempt
///   </li>
/// </ul>
+ (enum DeepLinkLaunchResult)launchActivityForEpicHttpDeepLinkInNavigationController:(UINavigationController * _Nonnull)navigationController forPerson:(id <PEPersonProtocol> _Nullable)person orgId:(NSString * _Nullable)orgId forUrl:(NSString * _Nonnull)url;
/// Launch activity for epicmychart deep link. For pre-login, autoSwitchPatient should be true so that after login, automatically switch to the right patient. For post-login, autoSwitchPatient should be false so we don’t switch patient to cause confusion.
/// \param navigationController the navigation controller to launch epicmychart deep link activity
///
///
/// returns:
/// launching deep link activity result
+ (enum DeepLinkLaunchResult)launchActivityForEpicMyChartDeepLinkWithNavigationController:(UINavigationController * _Nonnull)navigationController autoSwitchPatient:(BOOL)autoSwitchPatient;
/// Convert query parameters in the URL to a userInfo dictionary that can be passed to activities.
/// If there are duplicate keys in the query string, we will use the first one’s value and disregard any others.
/// \param urlString url string (such as the ones formatted as epichttp://)
///
/// \param orgId external org ID if present
///
///
/// returns:
///
/// <ul>
///   <li>
///     userInfo dictionary, potentially with no entries if there were no query parameters, or if some parsing went wrong
///   </li>
/// </ul>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)setupUserInfoUsingQueryParametersFromUrl:(NSString * _Nonnull)urlString orgId:(NSString * _Nullable)orgId SWIFT_WARN_UNUSED_RESULT;
/// Checks if a given url is a valid deep link url (such as those formatted as epichttp://)
/// \param url to check 
///
///
/// returns:
///
/// -deep link or not
+ (BOOL)isEpicHttpDeepLinkWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Gets a user displayable error message string for a given Deep Link Launch Result
/// \param the DeepLinkLaunchResult 
///
///
/// returns:
///
/// <ul>
///   <li>
///     an error message string
///   </li>
/// </ul>
+ (NSString * _Nonnull)getErrorMessageForEpicHttpLinkWithDeepLinkLaunchResult:(enum DeepLinkLaunchResult)launchResult SWIFT_WARN_UNUSED_RESULT;
/// Gets the WPActivity identifier for an activity that corresponds to the given url
/// \param url url string (such as the ones formatted as epichttp://)
///
///
/// returns:
///
/// <ul>
///   <li>
///     WPActivity that corresponds to the given url
///   </li>
/// </ul>
+ (WPActivity)getActivityForEpicHttpLinkFromUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Clear epicmychart deep link
+ (void)clearEpicMyChartDeepLink;
/// Whether there is a valid epicmychart deep link. If the epicmychart link is not parse yet, it’ll parse it before checking.
///
/// returns:
/// true if there is a valid epicmychart deep link; false otherwise
+ (BOOL)hasEpicMyChartDeepLink SWIFT_WARN_UNUSED_RESULT;
/// Whether this is a valid epicmychart deep link that contains a filepath parameter. If the epicmychart link is not parsed yet, it’ll parse it before checking via the call to hasEpicMyChartDeepLink
///
/// returns:
/// true if there is a valid epicmychart deep link that has a filepath parameter; false otherwise
+ (BOOL)hasFileDeepLink SWIFT_WARN_UNUSED_RESULT;
/// Get the epicmychart deep link status
///
/// returns:
/// the status of the epicmychart deep link
+ (enum EpicMyChartDeepLinkStatus)getEpicMyChartDeepLinkStatus SWIFT_WARN_UNUSED_RESULT;
/// Switch the patient context for epicmychart deep link
/// \param wprID MyChart account ID
///
///
/// returns:
/// true if patient context is switched; false otherwise
+ (BOOL)switchPatientForEpicMyChartDeepLinkWithWprID:(NSString * _Nonnull)wprID;
/// Create an epichttp deep link for launching the medical advice activity and attaching a file
+ (NSString * _Nonnull)createAppleECGEpicHttpDeepLinkWithFilePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
/// construct the deep link url starting with epicmychart://
/// \param feature feature for deep link activity
///
/// \param queryParams the dictionary contains key and value pair for query parameters
///
///
/// returns:
/// the complete deep link url
+ (NSString * _Nonnull)constructEpicMyChartDeepLinkUrlWithFeature:(NSString * _Nonnull)feature queryParams:(NSDictionary<NSString *, NSString *> * _Nullable)queryParams SWIFT_WARN_UNUSED_RESULT;
/// Construct the deep link url starting with epichttp://
/// \param feature feature for deep link activity
///
/// \param queryParams the dictionary contains key and value pair for query parameters
///
///
/// returns:
/// the complete deep link url
+ (NSString * _Nonnull)constructEpicHttpDeepLinkUrlWithFeature:(NSString * _Nonnull)feature queryParams:(NSDictionary<NSString *, NSString *> * _Nullable)queryParams SWIFT_WARN_UNUSED_RESULT;
/// Library wrapper for the accessResultForActivity function
+ (WPActivityAccessResult)accessResultForActivityWithDeepLink:(NSString * _Nonnull)deepLink person:(id <IWPPerson> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Checks security for the activity corresponding to the given deep link
/// @param deepLink the deep link for the activity to be checked. This can be a manually constructed deep link starting with a valid prefix (epichttp:// , epicmychart:// , or the app’s launch scheme), or one of the WPAPIActivity constants.
/// @param person the person whose access is being checked
+ (WPActivityAccessResult)accessResultForActivityWithDeepLink:(NSString * _Nonnull)deepLink personProtocol:(id <PEPersonProtocol> _Nonnull)personProtocol SWIFT_WARN_UNUSED_RESULT;
/// Returns the view controller for the activity that corresponds to the provided deep link. Within the activity, the information displayed and the features available will be dependent on the current person and the user’s security.
/// <ul>
///   <li>
///     Returns A view controller for the corresponding activity that should be immediately displayed. Returns nil if the WPAPIDeepLinkActionDelegate handled the deep link or if there was an issue launching the activity (i.e. current patient doesn’t have access to the activity, the deep link couldn’t be parsed)
///   </li>
/// </ul>
/// \param deepLink the deep link for the activity to be opened. This can be a manually constructed deep link starting with a valid prefix (epichttp // , epicmychart:// , or the app’s launch scheme), or one of the WPAPIActivity constants.
///
+ (UIViewController * _Nullable)getViewControllerForActivityWithDeepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
/// Checks if the activity corresponding to the given deep link should be presented modally, or pushed onto the navigation stack
/// @param deepLink the deep link for the activity to be checked. This can be a manually constructed deep link starting with a valid prefix (epichttp:// , epicmychart:// , or the app’s launch scheme), or one of the WPAPIActivity constants.
/// @return true if the activity’s view controller should be presented modally, false if it should be pushed onto the navigation stack
+ (BOOL)shouldPresentViewControllerModallyForActivityWithDeepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Replaces any valid deep link prefixes with epichttp://
///   </li>
///   <li>
///   </li>
///   <li>
///     @param deepLink a deep link to convert
///   </li>
///   <li>
///     @return an epichttp deep link with the same feature and query params
///   </li>
/// </ul>
+ (NSString * _Nonnull)convertToEpicHttpDeepLinkWithDeepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum to indicate Launch Result for when launching of an activity is attempted in response
/// to a deep link being tapped
typedef SWIFT_ENUM(NSInteger, DeepLinkLaunchResult, open) {
  DeepLinkLaunchResultLaunchSuccess = 0,
  DeepLinkLaunchResultLaunchFailedUnknown = 1,
  DeepLinkLaunchResultLaunchFailedUnsupported = 2,
  DeepLinkLaunchResultLaunchFailedNoSecurity = 3,
  DeepLinkLaunchResultLaunchFailedBadURL = 4,
  DeepLinkLaunchResultLaunchFailedPatientNotCurrent = 5,
  DeepLinkLaunchResultLaunchFailedPatientNotFound = 6,
  DeepLinkLaunchResultLaunchFailedUnable = 7,
};

typedef SWIFT_ENUM(NSInteger, EpicMyChartDeepLinkStatus, open) {
  EpicMyChartDeepLinkStatusUnavailable = 0,
  EpicMyChartDeepLinkStatusAvailable = 1,
};


/// Class representing the default theme for the application, which should be referenced when an organization theme is not available (i.e. prelogin).
SWIFT_CLASS("_TtC7MyChart14WPDefaultTheme")
@interface WPDefaultTheme : NSObject <PEThemeProtocol>
/// Returns the default theme for the application
+ (WPDefaultTheme * _Nonnull)getTheme SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;
@class WKNavigationAction;

SWIFT_CLASS("_TtC7MyChart33WPDocumentCenterWebViewController")
@interface WPDocumentCenterWebViewController : WPActivityWebViewController
/// Springboard item for Document Center Activity
///
/// returns:
///
/// <ul>
///   <li>
///     springboard info object
///   </li>
/// </ul>
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)viewDidLoad;
/// Intercepts a resource URL to extract the document ID from it and load the document
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart19WPDrivingDirections")
@interface WPDrivingDirections : NSObject
/// Launch maps from the specified address
/// \param address address to search for
///
+ (void)launchMapsWithAddress:(NSString * _Nonnull)address;
/// Launch maps from the specified address with the latitude/longitude as a starting search point
/// \param address address to search for
///
/// \param latitude latitude of starting point
///
/// \param longitude longitude of starting point
///
+ (void)launchMapsWithAddress:(NSString * _Nonnull)address latitude:(float)latitude longitude:(float)longitude;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol that defines delegate methods raised by extensibility view controllers that will pass control to another view controller that may still want to use login functions
SWIFT_PROTOCOL("_TtP7MyChart28WPExtensibilityLoginDelegate_")
@protocol WPExtensibilityLoginDelegate <NSObject>
/// \param url - the absolute string of the url that is being navigated to - for this method it is likely epicmychart //openlogin.
///
- (void)launchNativeLoginControllerWithUrl:(NSString * _Nonnull)url;
/// \param url - the url that is being navigated to. 
///
- (void)launchExternalSAMLLoginWithExternalUrl:(NSURL * _Nonnull)url;
/// \param urlRequest - the url request for the navigation action. 
///
- (void)launchSAMLLoginControllerWith:(NSURLRequest * _Nonnull)urlRequest;
@end


/// View controller that forwards an epichttp-based FDI feature to the corresponding view
SWIFT_CLASS("_TtC7MyChart27WPFDILauncherViewController")
@interface WPFDILauncherViewController : UIViewController
/// Initialize and FDI activity with at least one URL specified
/// \param fdiId The FDI to launch
///
- (nonnull instancetype)initWithFdiId:(NSString * _Nonnull)fdiId deepLinkURL:(NSString * _Nonnull)deepLinkURL OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)willEnterForeground;
/// Returns the correct FDI to use based on Epichttp link
/// \param url epichttp link containing either a webid or an iosid
///
///
/// returns:
/// the correct FDI to launch. Nil if invalid.
+ (NSString * _Nullable)parseFdiFromEpichttp:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns the correct URL to use based on Epichttp link
/// \param url epichttp link containing a url value
///
///
/// returns:
/// the correct URL to launch. Nil if invalid.
+ (NSString * _Nullable)parseUrlFromEpichttp:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface WPFDILauncherViewController (SWIFT_EXTENSION(MyChart)) <WPCustomFeatureLaunchListener>
- (BOOL)showExternalLinkPrompt SWIFT_WARN_UNUSED_RESULT;
- (void)onLaunchSuccessWithLaunchMode:(WPLaunchType)launchMode;
- (void)onLaunchFailure:(BOOL)showWebViewSupportError;
@end


SWIFT_CLASS("_TtC7MyChart31WPFamilyAccessWebViewController")
@interface WPFamilyAccessWebViewController : WPActivityWebViewController
- (void)viewDidLoad;
- (nonnull instancetype)init;
- (NSInteger)getWebViewPatientIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart36WPFutureAppointmentCaseProcedureView")
@interface WPFutureAppointmentCaseProcedureView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart29WPFutureAppointmentDetailView")
@interface WPFutureAppointmentDetailView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)buttonTapped;
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
@end

@class WPAppointment;
@class WPWaitListEntry;

SWIFT_CLASS("_TtC7MyChart40WPFutureAppointmentDetailsViewController")
@interface WPFutureAppointmentDetailsViewController : WPViewController
@property (nonatomic) BOOL startVideoVisitOnLoad;
/// Instantiates the Future Appointment Details view controller
/// \param appointment appointment
///
/// \param waitListEntry linked wait list entry for the appointment
///
///
/// returns:
/// The future appointment details view controller
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithAppointment:(WPAppointment * _Nonnull)appointment SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduled:(BOOL)justScheduled SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduled:(BOOL)justScheduled isEVisit:(BOOL)isEVisit SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduled:(BOOL)justScheduled shouldArriveAppointment:(BOOL)shouldArriveAppointment isEVisit:(BOOL)isEVisit SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)reloadData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIAlertController;

@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPOnDemandVideoVisitAlertDelegate>
- (void)showOnDemandVideoVisitAlert:(UIAlertController * _Null_unspecified)alert;
@end


@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPPatientVisitGuideLoadedProtocol>
- (void)visitGuideLoadedWithData:(NSData * _Nullable)data;
@end


@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPCancelAppointmentDelegate>
- (void)cancelAppointmentDidNotConfirm;
- (void)cancelAppointmentConfirmed:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
@end



@class WPSlotReviewInformationResult;
@class UIImage;
@protocol IWPImageSource;

SWIFT_CLASS("_TtC7MyChart29WPFutureAppointmentHeaderView")
@interface WPFutureAppointmentHeaderView : UIStackView <IWPImageLoaderDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)populateWithSlotReviewInformationResult:(WPSlotReviewInformationResult * _Nonnull)result;
- (void)setWithDate:(NSDate * _Nullable)date forTimeZone:(NSTimeZone * _Nullable)forTimeZone forTimeFormat:(NSString * _Nonnull)forTimeFormat;
- (void)didLoadImage:(UIImage * _Null_unspecified)image fromSource:(id <IWPImageSource> _Null_unspecified)source;
- (void)didFailToLoadImageFromSource:(id <IWPImageSource> _Null_unspecified)source;
@end

@class WPCardView;
@class NSLayoutConstraint;
@protocol WPViewContainingWebViewDelegate;

SWIFT_CLASS("_TtC7MyChart42WPFutureAppointmentPatientInstructionsView")
@interface WPFutureAppointmentPatientInstructionsView : UIView
@property (nonatomic, weak) IBOutlet WPCardView * _Null_unspecified rootView;
@property (nonatomic, weak) IBOutlet UIStackView * _Null_unspecified stackView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified headerLabel;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified trailingPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified bottomPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified topPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified leadingPaddingConstraint;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// This sets the delegate for the view containing web view so that we can present a web view controller if needed
- (void)setNavigationDelegate:(id <WPViewContainingWebViewDelegate> _Nullable)delegate;
- (void)populateWithContent:(NSString * _Nonnull)content isHtml:(BOOL)isHtml includeHeader:(BOOL)includeHeader;
@end


@interface WPFutureAppointmentPatientInstructionsView (SWIFT_EXTENSION(MyChart)) <WPViewContainingWebViewDelegate>
- (void)navigateToAllowedHostForRequest:(NSURLRequest * _Nullable)request allowedHosts:(NSArray * _Nullable)allowedHosts;
- (void)openUrlInExternalBrowser:(NSURL * _Nullable)url;
@end

@class WPAppointmentResource;

SWIFT_CLASS("_TtC7MyChart31WPFutureAppointmentProviderView")
@interface WPFutureAppointmentProviderView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)setDelegateLegacy:(id _Nonnull)delegate;
- (void)populateWithResource:(WPAppointmentResource * _Nonnull)resource;
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
@end


SWIFT_CLASS("_TtC7MyChart27WPFutureAppointmentTimeView")
@interface WPFutureAppointmentTimeView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
@end


SWIFT_CLASS("_TtC7MyChart33WPFutureAppointmentVideoVisitView")
@interface WPFutureAppointmentVideoVisitView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// response class for getting H2G++ refresh data status
SWIFT_CLASS("_TtC7MyChart34WPGetCommunityUpdateStatusResponse")
@interface WPGetCommunityUpdateStatusResponse : NSObject
@property (nonatomic, copy) NSArray<WPCommunityUpdateStatus *> * _Nonnull communityUpdateStatuses;
@end


SWIFT_CLASS("_TtC7MyChart36WPGetPushNotificationDetailsResponse")
@interface WPGetPushNotificationDetailsResponse : NSObject
@property (nonatomic, strong) WPPushNotification * _Nullable pushNotification;
- (WPPushNotification * _Nullable)getPushNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AnimatedImageView;

SWIFT_CLASS("_TtC7MyChart25WPIconTextButtonViewModel")
@interface WPIconTextButtonViewModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, strong) AnimatedImageView * _Nullable animationImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WPServer;

/// View controller responsible for setting up the initial view when the app is launched
SWIFT_CLASS("_TtC7MyChart23WPInitialViewController")
@interface WPInitialViewController : UIViewController <WPMyCustomersDelegate, WPTermsConditionsViewDelegate>
/// Creates an instance of WPInitialViewController from the storyboard.
/// \param launchOrganization the organization server ID that this needs to be launched with, if any
///
/// \param warnOnNavigationFromLaunchOrganization if an alert should be shown when navigating from the login screen for the launch organization server
///
///
/// returns:
/// WPInitialViewController instance
+ (WPInitialViewController * _Nonnull)getInstanceWithLaunchOrganization:(NSString * _Nonnull)launchOrganizationID warnOnNavigationFromLaunchOrganization:(BOOL)warnOnNavigationFromLaunchOrganization SWIFT_WARN_UNUSED_RESULT;
/// Creates an instance of WPInitialViewController from the storyboard.
/// \param launchOrganization the organization server ID that this needs to be launched with, if any
///
/// \param warnOnNavigationFromLaunchOrganization if an alert should be shown when navigating from the login screen for the launch organization server
///
///
/// returns:
/// WPInitialViewController instance
+ (WPInitialViewController * _Nonnull)getInstanceWithLaunchOrganization:(NSString * _Nonnull)launchOrganizationID warnOnNavigationFromLaunchOrganization:(BOOL)warnOnNavigationFromLaunchOrganization withLaunchUsername:(NSString * _Nullable)username withLaunchAuthToken:(NSString * _Nullable)authToken SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
/// Sets up the login page view controller using an embed segue.
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
/// When app enters foreground again, we should try to trigger biometric login right away.
- (void)didEnterForeground;
/// When a push notification is received post login, we need to scroll to the login screen of that organization
- (void)scrollToOrganizationForPushNotificationWithNotification:(NSNotification * _Nonnull)notification;
/// Displays an alert indicating that the user tried to share a PDF to MyChart that is not an Apple Health ECG PDF.
- (void)displayAlertForNonECGPDF;
- (void)selectCustomerLogin:(WPServer * _Null_unspecified)customer;
- (void)addCustomerLogin:(WPServer * _Null_unspecified)customer;
- (void)removeCustomerLogin:(WPServer * _Null_unspecified)customer;
- (void)moveCustomerLoginAtIndex:(NSInteger)fromIndex toIndex:(NSInteger)toIndex;
/// handles the acceptance of the EULA
- (void)didAccept:(BOOL)accept forType:(WPTermsType)termsType;
/// Handles the request that user wants to switch organizations.
- (void)switchOrganizations;
/// Shows the organization list if the patient either has to choose between orgs or has none selected
- (void)showListForZeroOrMultipleOrgs;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart26WPLettersWebViewController")
@interface WPLettersWebViewController : WPActivityWebViewController
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart22WPLoadingTableViewCell")
@interface WPLoadingTableViewCell : UITableViewCell <WPAppointmentsListRow>
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setWith:(id <WPAppointmentsListRowViewModel> _Nonnull)viewModel;
@end


SWIFT_CLASS("_TtC7MyChart16WPLoginUtilities")
@interface WPLoginUtilities : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart33WPMedicationsComponentBridgingAPI")
@interface WPMedicationsComponentBridgingAPI : NSObject <PEMedicationsComponentBridgingAPIProtocol>
/// get the view controller for MO meds
/// \param rxID id of a med
///
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for refilling a specific medication (used for alerts)
/// \param rxID id of the medication being refilled
///
- (UIViewController * _Nullable)getMedicationsViewControllerForRefillWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for outpatient medications in MyChart Now context
- (UIViewController * _Nullable)getMedicationsViewControllerForMCNOutPatient SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for MO medication based on certain criterias
/// \param rxId id of a med
///
/// \param isMCNOutPatientContext if the MO med view controller will show outpatient meds in a  MyChart Now context
///
/// \param isRefillContext if the MO med view controller is used in a med refill context
///
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxId:(NSString * _Nullable)rxId isMCNOutPatientContext:(BOOL)isMCNOutPatientContext isRefillContext:(BOOL)isRefillContext SWIFT_WARN_UNUSED_RESULT;
/// Checks if the local organization has MO disabled, and if they are on a version supporting MO Medications.
- (BOOL)shouldDisableOutpatientMeds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPMessageViewer;
@class NSString;
@class NSArray;

SWIFT_CLASS("_TtC7MyChart14WPMessagesUtil")
@interface WPMessagesUtil : NSObject
+ (NSArray * _Nonnull)getDisplayableMessageViewersForDetailsWithViewers:(NSArray<WPMessageViewer *> * _Nonnull)viewers showViewersSetting:(WPMessageViewersSetting)showViewersSetting userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
+ (NSArray * _Nonnull)getDisplayableMessageViewersForComposeReplyWithViewers:(NSArray<WPMessageViewer *> * _Nonnull)viewers showViewersSetting:(WPMessageViewersSetting)showViewersSetting confidentialMessagingSetting:(WPConfidentialitySetting)confidentialMessagingSetting userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<WPMessageViewer *> * _Nonnull)reconstructSelectedFromGenericViewersWithSelectedViewers:(NSArray<WPMessageViewer *> * _Nonnull)selectedViewers defaultViewers:(NSArray<WPMessageViewer *> * _Nonnull)defaultViewers userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
/// Open the attachment for preview. If the attachment type is unsupported for preview, will prompt the user to save/share it instead
/// \param attachment attachment object
///
/// \param viewController the viewController to be used to present the preview
///
+ (void)openAttachmentWithAttachment:(WPAttachment * _Nonnull)attachment viewController:(UIViewController * _Nonnull)viewController;
/// Constructs a WPAttachment object from an Apple filesystem URL. Currently used to generate an attachment object containing the ECG data stored in Apple’s filesystem
/// \param url The URL of the document within Apple’s file system
///
+ (WPAttachment * _Nullable)getAttachmentFromAppleFileURLWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// WPMyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
SWIFT_CLASS("_TtC7MyChart30WPMyChartBrandingConfiguration")
@interface WPMyChartBrandingConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Clears the configuration.
+ (void)clear;
/// Indicates whether or not there is currently a valid configuration for branding shared with the website.
+ (BOOL)hasConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Returns the color to use for the provided PEBrandedColor.  The returned color is based on the hierarchy documented with the brandedColorsMap.
/// \param brandedColor the PEBrandedColor for which to obtain a color
///
+ (UIColor * _Nonnull)getColorFor:(enum PEBrandedColor)brandedColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL for the header background image.
+ (NSString * _Nullable)getHeaderBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns the base image URL for general image resources.
+ (NSString * _Nullable)getBaseImageUrl SWIFT_WARN_UNUSED_RESULT;
/// Loads the MyChartBrandingConfiguration using the provided website URL. MyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
/// \param websiteUrl the URL of the corresponding MyChart website (e.g. “https://server.com/MyChart/”)
///
/// \param completion the completion block called when initialization is complete
///
+ (void)loadBrandingConfigurationWithWebsiteUrl:(NSString * _Nonnull)websiteUrl completion:(void (^ _Nullable)(BOOL))completion;
/// Returns the set of colors used to help distinguish and identify people that the user can access.
+ (NSArray<UIColor *> * _Nonnull)getColorsForPeople SWIFT_WARN_UNUSED_RESULT;
/// Returns the set of colors used to help distinguish and identify people that the user can access.
+ (NSArray<UIColor *> * _Nonnull)getTextColorsForPeople SWIFT_WARN_UNUSED_RESULT;
/// Returns the color in the set of people colors that corresponds to the provided color index.
/// \param colorIndex the color index (1 - 7) for a color in the set of people colors
///
+ (UIColor * _Nullable)getColorForPersonAtColorIndex:(NSInteger)colorIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the color in the set of people colors that corresponds to the provided color index.
/// \param colorIndex the color index (1 - 7) for a color in the set of people colors
///
+ (UIColor * _Nullable)getTextColorForPersonAtColorIndex:(NSInteger)colorIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the default color for the provided person. The default color should be used if a color index is not on file for a given person.
/// \param person the person to determine a default color for
///
+ (UIColor * _Nonnull)getDefaultColorForPerson:(id <PEPersonProtocol> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Returns the default text color for the provided person. The default color should be used if a color index is not on file for a given person
/// \param person the person to determine a default color for
///
+ (UIColor * _Nonnull)getDefaultTextColorForPerson:(id <PEPersonProtocol> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Returns the color index of a color in the set of colors for people that matches the provided color, or 0 if a match is not found.
/// \param color the color to search for in the set of colors for people
///
+ (NSInteger)getColorIndexForPersonColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart23WPNoImmunizationsNotice")
@interface WPNoImmunizationsNotice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for a table view cell to display that user has no immunizations.
SWIFT_CLASS("_TtC7MyChart36WPNoImmunizationsNoticeTableViewCell")
@interface WPNoImmunizationsNoticeTableViewCell : UITableViewCell
- (void)awakeFromNib;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart30WPOnMyWayWebViewViewController")
@interface WPOnMyWayWebViewViewController : WPActivityWebViewController
/// @brief Springboard item for On My Way Activity
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// @brief initializer used when opening activity
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// @brief viewDidLoad setup title and navbar as well as inject javascript
- (void)viewDidLoad;
/// @brief action item for when close button pressed
- (void)closePressed:(id _Null_unspecified)sender;
/// @brief callback funtion for intercepting navigation jumps
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Class representing the personal preferences for a person the user has access to.  Updates can be made to personal preferences and committed to the underlying person once they are saved to the database.
SWIFT_CLASS("_TtC7MyChart21WPPersonalPreferences")
@interface WPPersonalPreferences : NSObject
/// Initializes a set of personal preferences for the provided person.
/// \param person the person for which these personal preferences apply to
///
- (nonnull instancetype)initForPerson:(id <PEPersonProtocol> _Nonnull)person OBJC_DESIGNATED_INITIALIZER;
/// Indicates whether or not these personal preferences have had updates made to them.
///
/// returns:
/// True if updates have been made to these personal preferences; False otherwise.
- (BOOL)hasUpdates SWIFT_WARN_UNUSED_RESULT;
/// Updates the nickname for these personal preferences.
/// \param nickname the updated nickname, or empty to use the full name
///
- (void)updateWithNickname:(NSString * _Nonnull)nickname;
/// Updates the color index for these personal preferences.
/// \param colorIndex the updated color index
///
- (void)updateWithColorIndex:(NSInteger)colorIndex;
/// Updates the photo for these personal preferences.
/// \param photo the updated photo
///
- (void)updateWithPhoto:(UIImage * _Nonnull)photo;
/// Deletes the photo for these personal preferences.
- (void)deletePhoto;
/// Commits all updates made to these personal preferences back to the corresponding person. This method should only be called after the updates are saved on the database.
- (void)commitUpdates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UICollectionViewLayoutAttributes;

/// A collection view cell that displays a single set of personal preferences to the user.  The user can interact with the collection view cell to update their personal preferences.
SWIFT_CLASS("_TtC7MyChart39WPPersonalPreferencesCollectionViewCell")
@interface WPPersonalPreferencesCollectionViewCell : UICollectionViewCell
/// UIView
- (void)awakeFromNib;
/// UICollectionViewCell
- (UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;

@interface WPPersonalPreferencesCollectionViewCell (SWIFT_EXTENSION(MyChart)) <UITextFieldDelegate>
/// UITextFieldDelegate
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// UITextFieldDelegate
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end


/// API class with methods for web requests related to Personal Preferences
SWIFT_CLASS("_TtC7MyChart34WPPersonalPreferencesWebServiceAPI")
@interface WPPersonalPreferencesWebServiceAPI : NSObject
/// Saves personal preferences for a list of patients and/or a non-patient user. The provided handlers are invoked depending on web service success or failure.
/// \param updatedPersonalPreferencesList the list of personal preferences to save
///
/// \param successHandler the handler to invoke upon successful completion of the web service
///
/// \param failureHandler the handler to invoke upon failed completion of the web service
///
+ (void)savePersonalPreferencesWithUpdatedPersonalPreferencesList:(NSArray<WPPersonalPreferences *> * _Nullable)updatedPersonalPreferencesList successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(void))failureHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewLayout;

/// A collection view controller that lets the user view and update the personal preferences for each person they have access to, including themselves. Updates made to personal preferences must be saved before they take effect.
SWIFT_CLASS("_TtC7MyChart27WPPersonalizeViewController")
@interface WPPersonalizeViewController : UICollectionViewController
/// Creates an instance of WPPersonalizeViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
+ (WPPersonalizeViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UICollectionViewController
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// UICollectionViewController
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <UICollectionViewDelegateFlowLayout>
/// UICollectionViewDelegateFlowLayout
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImagePickerController;

@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// UIImagePickerControllerDelegate
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end



/// Post login push notification handler, with the assumption that the user is logged in and the push notification is for the current org.
SWIFT_CLASS("_TtC7MyChart34WPPostLoginPushNotificationHandler")
@interface WPPostLoginPushNotificationHandler : NSObject <IDidGetPushNotificationDetailsDelegate>
/// Notify to handle epicmychart deep link, or does nothing if user is not logged in.
///
/// returns:
/// true if the notification to handle the deep link is sent; false otherwise
+ (BOOL)notifyHandleEpicMyChartDeepLink;
- (nonnull instancetype)initWithPushNotificationID:(NSString * _Nonnull)pushNotificationID orgID:(NSString * _Nonnull)orgID alertTitle:(NSString * _Nonnull)alertTitle alertMessage:(NSString * _Nonnull)alertMessage positiveButtonText:(NSString * _Nonnull)positiveButtonText negativeButtonText:(NSString * _Nonnull)negativeButtonText inForeground:(BOOL)inForeground OBJC_DESIGNATED_INITIALIZER;
/// Get push notification details from server
- (void)getPushNotificationDetails;
/// Did complete getting push notification details from server.
/// \param pushNotification the push notification
///
- (void)didCompleteWithPushNotification:(WPPushNotification * _Nullable)pushNotification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7MyChart33WPPremiumBillingWebViewController")
@interface WPPremiumBillingWebViewController : WPActivityWebViewController
/// @brief initializer used when opening activity
- (nonnull instancetype)init;
/// <ul>
///   <li>
///     @brief initializer used when opening a subactivity
///   </li>
/// </ul>
- (nonnull instancetype)initWithSubmode:(NSString * _Nonnull)submode accountId:(NSString * _Nonnull)accountId;
/// @brief Springboard item for Premium Billing Activity
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// @brief viewDidLoad setup title and navbar as well as inject javascript
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)closePressed:(id _Null_unspecified)sender;
/// @brief callback funtion for intercepting navigation jumps
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart18WPPushNotification")
@interface WPPushNotification : NSObject
@property (nonatomic, copy) NSString * _Nullable pushNotificationID;
@property (nonatomic, copy) NSString * _Nullable deepLinkURL;
@property (nonatomic, copy) NSString * _Nullable focusWPR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart26WPPushNotificationDelegate")
@interface WPPushNotificationDelegate : NSObject <IDidGetPushNotificationDetailsDelegate>
/// Did get push notification details from server, do deep link
/// \param pushNotification the push notification
///
- (void)didCompleteWithPushNotification:(WPPushNotification * _Nullable)pushNotification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart25WPPushNotificationService")
@interface WPPushNotificationService : NSObject
/// Get push notification details from server using push notification ID
/// \param pushNotificationID push notification ID
///
/// \param didGetPushNotificationDetailsDelegate callback
///
+ (void)getPushNotificationDetailsWithPushNotificationID:(NSString * _Nonnull)pushNotificationID didGetPushNotificationDetailsDelegate:(id <IDidGetPushNotificationDetailsDelegate> _Nullable)didGetPushNotificationDetailsDelegate;
/// Check whether push notification deep link is supported by the server.
///
/// returns:
/// true if push notification deep link is supported; false otherwise
+ (BOOL)isPushNotificationDeepLinkSupported SWIFT_WARN_UNUSED_RESULT;
/// Check whether push notification org ID matches the current server
/// \param pushNotificationOrgID push notification org ID
///
///
/// returns:
/// true if push notification org ID matches the current server
+ (BOOL)pushNotificationOrgIDMatchCurrentServerWithPushNotificationOrgID:(NSString * _Nullable)pushNotificationOrgID SWIFT_WARN_UNUSED_RESULT;
/// Check whether deep link org ID matches the current server
///
/// returns:
/// true if deep link org ID matches the current server; false otherwise
+ (BOOL)deepLinkORGIDMatchCurrentServer SWIFT_WARN_UNUSED_RESULT;
/// Check whether deep link WPR ID matches the current patient
///
/// returns:
/// true if deep link WPR ID matches the current patient; false otherwise
+ (BOOL)deepLinkWPRIDMatchCurrentPatient SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebViewConfiguration;
@protocol PEOrganizationProtocol;
@class NSHTTPCookie;

SWIFT_CLASS("_TtC7MyChart20WPSamlSessionManager")
@interface WPSamlSessionManager : NSObject
/// Cache the cookies for the domains for later recovery
/// \param webViewConfig the WKWebViewConfig used for SAML login web view
///
/// \param logoutDomain the SAML logout domain
///
/// \param organization the organization object
///
+ (void)cacheSamlCookies:(WKWebViewConfiguration * _Nonnull)webViewConfig :(NSString * _Nonnull)logoutDomain :(id <PEOrganizationProtocol> _Nonnull)organization;
/// Logout of the saml session (If there is one)
+ (void)logoutOfSaml;
/// Checks if a cookie set during SAML login needs to be persisted. This looks across all organizations added to the login screen.
/// \param cookie the cookie to check
///
///
/// returns:
///
/// <ul>
///   <li>
///     true/false
///   </li>
/// </ul>
+ (BOOL)doesSamlLoginCookieNeedToPersistWithCookie:(NSHTTPCookie * _Nonnull)cookie SWIFT_WARN_UNUSED_RESULT;
/// Caches the logout url for the external logout jump
/// @param loginUrl The login url that will be launched
+ (void)cacheExternalLogoutUrl:(NSString * _Nonnull)loginUrl;
/// Caches the logout url for the external logout jump
/// @param logoutUrl
+ (void)setExternalLogoutUrl:(NSString * _Nullable)logoutUrl;
/// Clear the external logout url
+ (void)clearExternalLogoutUrl;
/// Get the external logout url
/// @return
+ (NSString * _Nullable)getExternalLogoutUrl SWIFT_WARN_UNUSED_RESULT;
/// Clear the external logout url
+ (void)markExternalLogoutRequired;
/// Add new values to the list of allowed SAML logout hosts
+ (void)addLogoutHostsWithHosts:(NSArray<NSString *> * _Nonnull)hosts;
/// Check whether a given URL is supported based on the list of allowed SAML logout hosts
+ (BOOL)isURLSupportedBySamlLogoutHosts:(NSURL * _Null_unspecified)url SWIFT_WARN_UNUSED_RESULT;
/// Clear the list of allowed SAML logout hosts
+ (void)clearLogoutHosts;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart24WPSchedulingComponentAPI")
@interface WPSchedulingComponentAPI : NSObject <PESchedulingComponentAPIProtocol>
- (UIViewController * _Nonnull)getScheduleWebViewControllerWithHMScheduleAppointmentWithReasonForVisit:(NSString * _Nonnull)reasonForVisit hmTopicId:(NSString * _Nonnull)hmTopicId dontEncryptTopic:(BOOL)dontEncryptTopic SWIFT_WARN_UNUSED_RESULT;
- (UINavigationController * _Nonnull)getTicketSchedulingViewControllerWithTicket:(NSString * _Nonnull)tktId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart26WPSchedulingDisplayManager")
@interface WPSchedulingDisplayManager : NSObject
+ (NSString * _Nullable)getSlotReviewWarningString:(WPSlotReviewInformationResult * _Nonnull)slotReviewInfo SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getFormattedDateTimeString:(WPSlotReviewInformationResult * _Nonnull)slotReviewInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

SWIFT_CLASS("_TtC7MyChart34WPSchedulingSlotReviewCommentsView")
@interface WPSchedulingSlotReviewCommentsView : WPCardView
@property (nonatomic, weak) IBOutlet UITextView * _Null_unspecified commentsTextView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified commentsLabel;
+ (WPSchedulingSlotReviewCommentsView * _Nullable)createView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIButton;
@class UIImageView;
@protocol WPSchedulingSlotReviewWarningViewDelegate;

SWIFT_CLASS("_TtC7MyChart33WPSchedulingSlotReviewWarningView")
@interface WPSchedulingSlotReviewWarningView : UIView
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified warningButton;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified warningLabel;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified caratImageView;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified warningImageView;
@property (nonatomic, strong) id <WPSchedulingSlotReviewWarningViewDelegate> _Nullable delegate;
+ (WPSchedulingSlotReviewWarningView * _Nullable)createView SWIFT_WARN_UNUSED_RESULT;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7MyChart41WPSchedulingSlotReviewWarningViewDelegate_")
@protocol WPSchedulingSlotReviewWarningViewDelegate
- (void)warningViewTapped;
@end


/// Model for a TB or immunization screening.
/// Any web service response type MUST extend Codable.
SWIFT_CLASS("_TtC7MyChart11WPScreening")
@interface WPScreening : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol WPScreeningWorkflowEntryDelegate;

/// Class for a table view cell for a TB or immunizations history screening.
SWIFT_CLASS("_TtC7MyChart24WPScreeningTableViewCell")
@interface WPScreeningTableViewCell : UITableViewCell
@property (nonatomic, weak) id <WPScreeningWorkflowEntryDelegate> _Nullable delegate;
- (void)awakeFromNib;
/// Populate this banner with data from the screening
/// \param screening 
///
- (void)setupWithScreening:(WPScreening * _Nonnull)screening;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol for listeners to button being clicked
SWIFT_PROTOCOL("_TtP7MyChart32WPScreeningWorkflowEntryDelegate_")
@protocol WPScreeningWorkflowEntryDelegate
- (void)enterScreeningWorkflowWithType:(NSInteger)type templateID:(NSString * _Nullable)templateID;
@end


/// Response object for requestScreenings service call
SWIFT_CLASS("_TtC7MyChart27WPScreeningsServiceResponse")
@interface WPScreeningsServiceResponse : NSObject
/// List of screenings
@property (nonatomic, copy) NSArray<WPScreening *> * _Null_unspecified screenings;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for WebRequests related to Screenings
SWIFT_CLASS("_TtC7MyChart25WPScreeningsWebServiceAPI")
@interface WPScreeningsWebServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <ScreeningsCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Get list of screenings.
/// Callers should first ensure that the screenings workflow is available by calling WPUtil_Misc.isMOScreeningsAvailable().
/// \param patientContext the patient context
///
- (void)requestScreeningsWithPatientContext:(PEPatientContext * _Nonnull)patientContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol WPHealthSummaryMOWorkflowCompleteDelegate;

/// View controller for mobile-optimized screenings workflow
SWIFT_CLASS("_TtC7MyChart29WPScreeningsWebViewController")
@interface WPScreeningsWebViewController : WPActivityWebViewController
@property (nonatomic, weak) id <WPHealthSummaryMOWorkflowCompleteDelegate> _Nullable delegate;
/// Convenience initializer with parameters
- (nonnull instancetype)initWithType:(NSInteger)type templateID:(NSString * _Nonnull)templateID closeDelegate:(id <WPHealthSummaryMOWorkflowCompleteDelegate> _Nonnull)closeDelegate;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Layout class to display onboarding view for switch organization
/// button when patients first add an organization.
SWIFT_CLASS("_TtC7MyChart34WPSwitchOrganizationOnboardingView")
@interface WPSwitchOrganizationOnboardingView : UIView
/// Initialize and show the switch organizations onboarding view
/// \param parentViewController The view controller showing the onboarding view
///
/// \param highLightButton The button need to be highlighted on the view
///
///
/// returns:
///
/// <ul>
///   <li>
///     the instancce of the view that was initialized
///   </li>
/// </ul>
+ (WPSwitchOrganizationOnboardingView * _Nonnull)loadAndShowSwitchOrganizationsOnboardingViewWithParentViewController:(UIViewController * _Nonnull)parentViewController highLightButton:(UIButton * _Nonnull)highLightButton;
/// Initialization method of the class
/// \param parentViewController The view controller showing the onboarding view
///
/// \param highLightButton The button need to be highlighted on the view
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController highLightButton:(UIButton * _Nonnull)highLightButton OBJC_DESIGNATED_INITIALIZER;
/// Required initialization method
/// \param aDecoder Decoder object
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Dismiss the onboarding view when the Ok I GOT IT button is tapped. This also marks onboarding as shown in NSUserDefaults.
/// \param sender the button trigger the action
///
- (void)dismissOnboardingWithSender:(UIButton * _Nonnull)sender;
/// check if the switch organizations onboarding view has been shown
///
/// returns:
/// a boolean indicating if it has been shown
+ (BOOL)didShowSwitchOrganizationsOnboarding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The header for sections in a WPTableView
SWIFT_CLASS("_TtC7MyChart28WPTableViewSectionHeaderView")
@interface WPTableViewSectionHeaderView : UITableViewHeaderFooterView
/// Returns our own label instead of auto-generated one from UIKit in case someone tries to access it
@property (nonatomic, readonly, strong) UILabel * _Nullable textLabel;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart39WPTelemedicineWaitingRoomViewController")
@interface WPTelemedicineWaitingRoomViewController : WPViewController
/// Instantiates the Telemedicine Waiting Room view controller
/// \param appointment appointment
///
///
/// returns:
/// The telemedicine waiting room view controller
+ (WPTelemedicineWaitingRoomViewController * _Nonnull)instantiateWithAppointment:(WPAppointment * _Nonnull)appointment SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart35WPTestResultDetailWebViewController")
@interface WPTestResultDetailWebViewController : WPActivityWebViewController
- (nonnull instancetype)initWithOrderID:(NSString * _Nonnull)orderID;
- (void)closePressed:(id _Null_unspecified)sender;
- (void)backPressed:(id _Null_unspecified)sender;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PEEncounterContext;
@protocol PETestResult;
@protocol PEComponentHostProtocol;
@class WPTestResult;

SWIFT_CLASS("_TtC7MyChart33WPTestResultDetailsViewController")
@interface WPTestResultDetailsViewController : WPViewController
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestDat:(NSString * _Nonnull)dat andExternalOrgId:(NSString * _Nullable)externalOrgId andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestDat:(NSString * _Nonnull)dat andExternalOrgId:(NSString * _Nullable)externalOrgId andLabName:(NSString * _Nonnull)labName andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestOrder:(NSString * _Nonnull)orderId andExternalOrgId:(NSString * _Nullable)externalOrgId andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestOrder:(NSString * _Nonnull)orderId andExternalOrgId:(NSString * _Nullable)externalOrgId isOrderIdEncrypted:(BOOL)isOrderIdEncrypted andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithPETestResult:(id <PETestResult> _Nonnull)result overrideUri:(NSString * _Nonnull)overrideUri componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost patientContext:(PEPatientContext * _Nonnull)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestResult:(WPTestResult * _Nonnull)result SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)showImageOnTheRight;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
/// UIScrollViewDelegate
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPViewContainingWebViewDelegate>
/// WPViewContainingWebViewDelegate
- (void)navigateToAllowedHostForRequest:(NSURLRequest * _Nullable)request allowedHosts:(NSArray * _Nullable)allowedHosts;
/// WPViewContainingWebViewDelegate
- (void)openUrlInExternalBrowser:(NSURL * _Nullable)url;
@end



SWIFT_CLASS("_TtC7MyChart10WPTestScan")
@interface WPTestScan : WPObject
@property (nonatomic, copy) NSString * _Nullable dcsID;
@property (nonatomic, copy) NSString * _Nullable encryptedDCSID;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable fileType;
@property (nonatomic, copy) NSData * _Nullable data;
@property (nonatomic, copy) NSDate * _Nullable scanDateTime;
- (void)setXMLValue:(id _Null_unspecified)value forKey:(NSString * _Null_unspecified)key;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart28WPTiffLauncherViewController")
@interface WPTiffLauncherViewController : WPViewController <WPShareDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the view controller with a dcs ID and an optional file extension for the attachment
/// \param dcsID dcs ID of the attachment being launched
///
/// \param dcsExtension optional file extension for the attachment
///
- (nonnull instancetype)initWithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
/// Callback method that is called after getting the attachment from the server
/// \param response The response object containing the attachment object
///
- (void)didGetDocumentWithResponse:(WPGetDocumentResponse * _Nonnull)response;
- (void)didShowShareDialog;
- (void)didCancelShareDialog;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart16WPToolTipManager")
@interface WPToolTipManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (void)setUpToolTips:(WPViewController * _Nonnull)viewController;
@end

@class UIPanGestureRecognizer;

SWIFT_CLASS("_TtC7MyChart13WPToolTipView")
@interface WPToolTipView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)handleTap:(UIPanGestureRecognizer * _Nonnull)sender;
@end

@class NSUserActivity;
@protocol UIUserActivityRestoring;

@interface WPUtil_AppDelegate (SWIFT_EXTENSION(MyChart))
+ (BOOL)willContinueUserActivityWithActivityType:(NSString * _Nonnull)activityType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)continueUserActivity:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nonnull)(NSArray<id <UIUserActivityRestoring>> * _Nullable))restorationHandler SWIFT_WARN_UNUSED_RESULT;
@end


/// Draws a polygon with its center at the given point. Draws in the given context
/// but uses the current line/fill color and size set up outside the function
/// \param point the center point of the polygon
///
/// \param radius the radius of the polygon i.e. from center to any of the outermost points
///
/// \param sides the number of sides to draw
///
/// \param context the CGContext in which to draw
///
SWIFT_CLASS("_TtC7MyChart19WPUtil_CoreGraphics")
@interface WPUtil_CoreGraphics : NSObject
+ (void)drawPolygonCenteredAtPoint:(CGPoint)point radius:(double)radius sides:(NSInteger)sides context:(CGContextRef _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartWebViewControllerManager;

@interface WPUtil_Misc (SWIFT_EXTENSION(MyChart))
/// Check if the URL’s host is an allowed host.
/// \param url the url that we want to open
///
/// \param allowedHosts A list of hosts are allowed to be opened inside the app
///
+ (BOOL)isUrl:(NSString * _Nonnull)url supportedByHosts:(NSArray<NSString *> * _Nonnull)allowedHosts SWIFT_WARN_UNUSED_RESULT;
/// Writes audits for document viewing
/// \param dcsId DCS for the document
///
+ (void)auditDocumentViewedWithDcsId:(NSString * _Nullable)dcsId;
/// Writes audits for document viewing+download
/// \param dcsId DCS for the document
///
+ (void)auditDocumentDownloadWithDcsId:(NSString * _Nullable)dcsId;
/// Objective C code, and specifically the WPActivityManager, cannot see WPMedicationWebViewControllerManager until iOS 13. This bridges that gap.
+ (Class _Nonnull)getWPMedicationsWebViewControllerManagerUntiliOS13 SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=13.0);
/// Objective C code, and specifically the WPActivityManager, cannot see ContactVerificationWebViewControllerManager until iOS 13. This bridges that gap.
+ (MyChartWebViewControllerManager * _Nonnull)getContactVerificationWebViewControllerManagerUntiliOS13 SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=13.0);
/// Objective C code, and specifically the WPActivityManager, cannot see WPScreeningWebViewControllerManager until iOS 13. This bridges that gap.
+ (MyChartWebViewControllerManager * _Nonnull)getWPSreeningWebViewControllerManagerUntiliOS13 SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=13.0);
@end


@interface WPUtil_UI (SWIFT_EXTENSION(MyChart))
/// Get a standard table header for a WPTableView
/// \param title Title to display
///
/// \param icon Icon to display
///
/// \param axLabel accessibility label for the icon
///
/// \param target target receiving actions
///
/// \param selector selector of the target
///
+ (WPTableViewSectionHeaderView * _Nullable)sectionHeaderViewWithTitle:(NSString * _Nonnull)title andIcon:(UIImage * _Nullable)icon andAccessibilityLabelForIcon:(NSString * _Nullable)axLabel andTarget:(id _Nullable)target andSelector:(SEL _Nullable)selector SWIFT_WARN_UNUSED_RESULT;
@end

@class WPWebView;

SWIFT_CLASS("_TtC7MyChart23WPViewContainingWebView")
@interface WPViewContainingWebView : UIView
@property (nonatomic, strong) WPWebView * _Null_unspecified webView;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)loadWithHtml:(NSString * _Nullable)html;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)layoutSubviews;
@end



@interface WPViewContainingWebView (SWIFT_EXTENSION(MyChart)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
@end


@interface WPViewContainingWebView (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart32WPWebSessionManagerMyChartHelper")
@interface WPWebSessionManagerMyChartHelper : NSObject
+ (void)onUserLogInSetUpSession:(NSInteger)patientIndex;
+ (void)onPatientContextChanged:(NSInteger)patientIndex;
+ (void)maintainCurrentSessionSetup:(NSInteger)patientIndex;
+ (void)onPrepareForWebSessionUse:(NSInteger)patientIndex;
+ (BOOL)isDirectUrlSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)onClientLogoutStarted;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart30WPWebSessionManagerToolTipView")
@interface WPWebSessionManagerToolTipView : WPToolTipView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)pressedClearCookiesWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedClearManagerWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedFastKeepAliveWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedNoCacheURLSWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedClearLogoutRequestWithSender:(UIButton * _Null_unspecified)sender;
@end

@protocol WPGetMyChartUrlCallbackProtocol;
@protocol WPGetMyChartJumpTokenCallbackProtocol;
@protocol WPAPICreateMyChartURLDelegate;

/// <ul>
///   <li>
///     API class with methods for WebRequests related to Web Session Manager
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7MyChart32WPWebSessionManagerWebServiceAPI")
@interface WPWebSessionManagerWebServiceAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebModeKey;)
+ (NSString * _Nonnull)WebModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebMessageIdKey;)
+ (NSString * _Nonnull)WebMessageIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebTaskIdKey;)
+ (NSString * _Nonnull)WebTaskIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebProviderIdKey;)
+ (NSString * _Nonnull)WebProviderIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebTicketIdKey;)
+ (NSString * _Nonnull)WebTicketIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebReasonForVisitKey;)
+ (NSString * _Nonnull)WebReasonForVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebHideReasonForVisitStepKey;)
+ (NSString * _Nonnull)WebHideReasonForVisitStepKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebWorkFlowKey;)
+ (NSString * _Nonnull)WebWorkFlowKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebCampaignIdKey;)
+ (NSString * _Nonnull)WebCampaignIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebCsnKey;)
+ (NSString * _Nonnull)WebCsnKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebCsnIsEncryptedKey;)
+ (NSString * _Nonnull)WebCsnIsEncryptedKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebAllowedReasonForVisitKey;)
+ (NSString * _Nonnull)WebAllowedReasonForVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebPrescriptionIDKey;)
+ (NSString * _Nonnull)WebPrescriptionIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebMedRefillModeKey;)
+ (NSString * _Nonnull)WebMedRefillModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebContextKey;)
+ (NSString * _Nonnull)WebContextKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebHMTopicIDKey;)
+ (NSString * _Nonnull)WebHMTopicIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebHMDontEncryptTopicKey;)
+ (NSString * _Nonnull)WebHMDontEncryptTopicKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WebCustomMode;)
+ (NSString * _Nonnull)WebCustomMode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <ul>
///   <li>
///     Method to check if an MO view can launch
///   </li>
///   <li>
///     @param listener
///   </li>
/// </ul>
+ (void)getMyChartUrlWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters listener:(id <WPGetMyChartUrlCallbackProtocol> _Nonnull)listener;
/// <ul>
///   <li>
///     Method to check if an MO view can launch
///   </li>
///   <li>
///     @param listener
///   </li>
/// </ul>
+ (void)getMyChartJumpTokenWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters isExternal:(BOOL)isExternal orgId:(NSString * _Nullable)orgId listener:(id <WPGetMyChartJumpTokenCallbackProtocol> _Nonnull)listener;
/// <ul>
///   <li>
///     Method to check if an MO view can launch
///   </li>
///   <li>
///     @param listener
///   </li>
/// </ul>
+ (void)getMyChartJumpTokenLibraryWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters isExternal:(BOOL)isExternal orgId:(NSString * _Nullable)orgId listener:(id <WPAPICreateMyChartURLDelegate> _Nonnull)listener;
+ (NSString * _Nonnull)getModeString:(WPMyChartWebViewMode)modeEnum SWIFT_WARN_UNUSED_RESULT;
@end

@class WKUserContentController;
@class WKScriptMessage;

SWIFT_CLASS("_TtC7MyChart9WPWebView")
@interface WPWebView : WKWebView <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart13WPWebViewUtil")
@interface WPWebViewUtil : NSObject
/// !
/// * @brief Searches through the webpage for an ‘a’ link that has a URL that matches the given
/// *        url. If found retrieves the given attribute of the ‘a’ element. Used for WKWebView
/// *
/// * @param attribute     The html attribute to retrieve from the ‘a’ link
/// * @param forLink       The link URL to retrieve the attribute from
/// * @param inWKWebView   The webview to search in
/// * @param completion    The completion handler where the attribute value is passed back
/// *
+ (void)getAttribute:(NSString * _Nullable)attribute forLink:(NSString * _Nullable)forLink inWKWebView:(WKWebView * _Nullable)inWKWebView completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// !
/// * @brief Finds all the ‘a’ elements in a document. For each element it compares the ‘href’
/// *        attribute to the supplied URL. If they match it then returns the supplied property
/// *        of the element. Used for WKWebView
/// *
/// * @param property      A function or property that can be called on an ‘a’ element.
/// * @param forLink       The link URL’s href to call the property on
/// * @param inWKWebView   The webview to search in
/// * @param completion    The completion handler where the attribute value gets passed back
/// *
+ (void)getProperty:(NSString * _Nullable)aProperty forLink:(NSString * _Nullable)forLink inWKWebView:(WKWebView * _Nullable)inWKWebView completion:(void (^ _Nullable)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
